[
  {
    "title": "第3章 オブジェクト指向の考え方",
    "file": "chapter03-oop-basics.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 5,
      "なければなりません/なければならない": 0,
      "必須": 3,
      "重要です/重要な": 46,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 49,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 3,
      "ことが必要": 0,
      "注意が必要": 3,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 1,
      "検討する必要": 0
    },
    "total_prescriptive": 110,
    "word_count": 6176,
    "prescriptive_density": 17.810880829015545,
    "examples": {
      "べき/べきだ/べきです": [
        "...**ポリモーフィズムの仕組み**：  ①　**統一インターフェイス**: すべての決済方法が実装すべき共通のメソッド仕様を定義  ②　**多様な実装**: 同じインターフェイスに対して、具体的な決済手段...",
        "...**インターフェイス**という概念があります。 インターフェイスにはクラスの振る舞いの名前や渡されるべきデータ型、振る舞いによる結果のデータ型だけを定義しておけます。  - インターフェイスは、それ自体を...",
        "...算  これらの実験を通じて、Javaの数値演算の特性と限界を深く理解し、実際のプログラム開発で注意すべきポイントを学ぶことができます。  ### 算術演算を伴う代入演算子（再帰代入演算子）  左辺に対して..."
      ],
      "必須": [
        "...ジェクト指向の概念を理解することは困難です。  また、Java基本文法での簡単なプログラム作成経験も必須です。変数の宣言と初期化、メソッドの定義と呼び出し、制御構造（if文、ループ文）の使用など、手続き型...",
        "...ceptionを回避 } ```  このような文字列の特性を理解することは、Javaプログラマとして必須の知識であり、多くのバグを未然に防ぐことができます。  ### 単純な繰り返し  #### whil...",
        "...ercises/chapter03/ ├── basic/              # 基礎課題（必須）- オブジェクト指向の基本を確実に │   ├── README.md       # 詳細な課題..."
      ],
      "重要です/重要な": [
        "...本章の学習目標  ### 前提知識  本章でオブジェクト指向の考え方を学習するためには、いくつかの重要な前提知識が必要です。  **技術的前提知識**：  第1章までの内容を完全に習得していることが前提と...",
        "...クト指向との違いを明確に理解できます。  さらに、メソッドと変数の概念をしっかりと理解していることが重要です。メソッドがどのようにデータを処理し、戻り値を返すのか、変数のスコープがどのように決まるのかといった...",
        "...：  ソフトウェア開発における実際の問題を実感していることが、オブジェクト指向の必要性を理解する上で重要です。手続き型プログラミングでプログラムが大きくなると、コードの複雑化、メンテナンスの困難さ、機能追加時..."
      ],
      "必要です/必要な/必要があります": [
        "...### 前提知識  本章でオブジェクト指向の考え方を学習するためには、いくつかの重要な前提知識が必要です。  **技術的前提知識**：  第1章までの内容を完全に習得していることが前提となります。これには...",
        "...*概念的前提知識**：  ソフトウェア開発における実際の問題を実感していることが、オブジェクト指向の必要性を理解する上で重要です。手続き型プログラミングでプログラムが大きくなると、コードの複雑化、メンテナ...",
        "...の不正なアクセスを防ぎ、データの整合性を保護する設計能力は、信頼性の高いソフトウェアを開発するために必要不可欠です。  **到達レベルの指標**：  本章を完了した時点で、実世界の概念（商品、人物、車、銀..."
      ],
      "ことが重要": [
        "...ブジェクト指向との違いを明確に理解できます。  さらに、メソッドと変数の概念をしっかりと理解していることが重要です。メソッドがどのようにデータを処理し、戻り値を返すのか、変数のスコープがどのように決まるのかとい...",
        "...という用語が頻繁に登場し、初学者にとって混乱の原因となることがあります。これらの関係を明確に理解することが重要です。  **クラス**は、オブジェクトの設計図です。建築にたとえれば、家の設計図にあたります。クラ...",
        "...ス設計では、そのオブジェクトが「何を知っているか（属性）」と「何ができるか（操作）」を明確に定義することが重要です。  以下のBookクラスは、本という概念の本質的な属性と操作を表現した例です：  <span..."
      ],
      "注意が必要": [
        "...れが独立したデータを保持します。  **オブジェクト**という用語は、文脈によって意味が変わることに注意が必要です。多くの場合、オブジェクトはインスタンスを指しますが、より幅広い概念を表す場合や、クラス自体を指...",
        "...れ2種類ずつあります。 この演算子を式中で使う場合、この違いがとても大きく、間違えやすい点ですので、注意が必要です。  #### インクリメント  | 演算子(位置に注意) | 式中で行われるものと同義のステー...",
        "...ん。   ただし、整数型に型の強制変換を行ったタイミングで、小数点以下の値は切り捨てられてしまうので注意が必要です。  <span class=\"listing-number\">**サンプルコード3-22**<..."
      ],
      "考える必要": [
        "...ラミングだけでなく設計としての側面も強い  ### オブジェクト指向言語でつまずやすい継承  難しく考える必要はありません。 同じ状態、同じ振る舞いを持つクラスをそれぞれコピー&ペーストで作ると、管理が煩雑にな..."
      ]
    }
  },
  {
    "title": "第2章 Java基本文法",
    "file": "chapter02-getting-started.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 6,
      "なければなりません/なければならない": 0,
      "必須": 4,
      "重要です/重要な": 41,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 25,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 76,
    "word_count": 3085,
    "prescriptive_density": 24.635332252836303,
    "examples": {
      "べき/べきだ/べきです": [
        "...境により、悪意のあるコードがシステムに損害を与えることを防ぎます。また、**実行時最適化**も特筆すべき機能です。JIT（Just-In-Time）コンパイラは、プログラムの実行中に頻繁に使用される部分を...",
        "...算子をベースにしていますが、型安全性を高めるためのいくつかの重要な改良が加えられています。特に注目すべきは、論理演算子における短絡評価の明確な仕様化と、文字列連結演算子（`+`）のオーバーロードです。以下...",
        "...stChar = message.charAt(0);  // 'H' ```  このコードで注目すべき重要な概念は、文字列リテラル（`\"Hello\"`）と`new`キーワードを使用した文字列作成の違いで..."
      ],
      "必須": [
        "...前提知識  本章でJavaの基本文法を学習するためには、いくつかの重要な前提知識が必要です。  **必須前提知識**：  まず第一に、第1章で学んだJava開発環境の構築が完了していることが不可欠です。こ...",
        "...界人口）**: 80億という値はintの最大値（約21億）を超えるため、long型が必要。末尾のLは必須  ⑤　**float型（商品価格）**: 小数点以下2桁程度の精度で十分な金額にはfloat型でメ...",
        "...# 2.3 変数の宣言と初期化  Javaでは、すべての変数は使用前に宣言する必要があり、型の明示が必須です。これはC言語と同様ですが、Javaはより厳格な初期化ルールを持っています。ローカル変数は明示的..."
      ],
      "重要です/重要な": [
        "...## 本章の学習目標  ### 前提知識  本章でJavaの基本文法を学習するためには、いくつかの重要な前提知識が必要です。  **必須前提知識**：  まず第一に、第1章で学んだJava開発環境の構築が...",
        "...がスムーズに行えることで、プログラミング学習に集中できます。  また、コマンドライン操作の基礎知識も重要です。Javaのコンパイルや実行はコマンドラインから行うことが基本であり、ディレクトリの移動（cdコマン...",
        "...す。これは、C言語での手動メモリ管理との違いを理解し、Javaプログラミングの安全性を把握するために重要です。  **技能習得目標**：  実际のプログラミングスキルとして、まずJavaの基本データ型（int..."
      ],
      "必要です/必要な/必要があります": [
        "...習目標  ### 前提知識  本章でJavaの基本文法を学習するためには、いくつかの重要な前提知識が必要です。  **必須前提知識**：  まず第一に、第1章で学んだJava開発環境の構築が完了していることが...",
        "...ールの動作確認が含まれます。  次に、Hello Worldプログラムの作成と実行を成功させた経験が必要です。この経験を通じて、Javaプログラムのコンパイルと実行の基本的なワークフローを理解していることが前...",
        "...数の宣言と代入、if文やswitch文による条件分岐、for文やwhile文によるループ処理の経験が必要です。これらの構造化プログラミングの基礎があることで、Javaの文法との比較を通じて、より深い理解が得ら..."
      ]
    }
  },
  {
    "title": "第16章 マルチスレッドプログラミング",
    "file": "chapter16-multithreading.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 1,
      "必須": 4,
      "重要です/重要な": 10,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 22,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 1,
      "ことが必要": 1,
      "注意が必要": 1,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 40,
    "word_count": 8727,
    "prescriptive_density": 4.583476566976052,
    "examples": {
      "なければなりません/なければならない": [
        "...作る（5分）...  ``` お客様Aの料理がすべて完成するまで25分、お客様Bは最低でも25分待たなければなりません。  **マルチスレッド（複数のシェフ）の場合：** ``` シェフ1: お客様Aの前菜 → お客様..."
      ],
      "必須": [
        "...前提知識  本章を学習するためには、第13章までに習得した実用的なJavaアプリケーション開発能力が必須となります。特に、オブジェクト指向設計の実践的な理解、インターフェイスと実装の分離、例外処理やコレク...",
        "...ドプログラミングの基礎から高度な並行処理までを習得します。     ## 16.4 基礎レベル課題（必須）  ### 16.4.1 課題1: 基本的なスレッド操作  基本的なスレッド生成と操作を実装してく...",
        "...ntel Core i9は最大24コア、AMD Threadripperは64コア - **並列化の必須化**：性能向上は並列化でのみ実現可能  **スレッド生成方法の比較：** **スレッド生成方式の比..."
      ],
      "重要です/重要な": [
        "...ど、堅牢なプログラムを作成する基本的な能力が求められます。また、同期処理と非同期処理の概念的な理解も重要です。単一のスレッドで順番に処理が実行される同期処理と、複数の処理が並行して実行される非同期処理の違いを...",
        "...していることが必要です。さらに、現代のソフトウェア開発においてパフォーマンスとスケーラビリティがなぜ重要なのかという問題意識を持っていることで、本章の内容をより深く理解できます。  システム理解の前提として...",
        "...Java 5で導入されたjava.util.concurrentパッケージの設計思想を理解することも重要な学習目標です。このパッケージは、Doug Leaらによって設計された、高性能かつ安全な並行処理のため..."
      ],
      "必要です/必要な/必要があります": [
        "...ログラミング  ## 16.1 並行処理の世界への招待  ### 16.1.1 なぜマルチスレッドが必要なのか  これまでの章で学習してきたプログラムは、すべて「一つずつ順番に」処理を実行してきました。しか...",
        "...処理が実行される同期処理と、複数の処理が並行して実行される非同期処理の違いを理解し、なぜ非同期処理が必要なのかを認識していることが必要です。さらに、現代のソフトウェア開発においてパフォーマンスとスケーラビリ...",
        "...数の処理が並行して実行される非同期処理の違いを理解し、なぜ非同期処理が必要なのかを認識していることが必要です。さらに、現代のソフトウェア開発においてパフォーマンスとスケーラビリティがなぜ重要なのかという問題意..."
      ],
      "ことが重要": [
        "...cutorService`の使用が推奨されますが、既存のコードで見かけることがあるため、理解しておくことが重要です。  <span class=\"listing-number\">**サンプルコード16-17-2..."
      ],
      "ことが必要": [
        "...と、複数の処理が並行して実行される非同期処理の違いを理解し、なぜ非同期処理が必要なのかを認識していることが必要です。さらに、現代のソフトウェア開発においてパフォーマンスとスケーラビリティがなぜ重要なのかという問..."
      ],
      "注意が必要": [
        "...fy）するという仕組みです。しかし、このメカニズムは多くの微妙な問題を含んでおり、正しく使用するには注意が必要です。  **wait/notifyの基本的な仕組み**： - `wait()`: 現在のスレッドを..."
      ]
    }
  },
  {
    "title": "第4章 クラスとインスタンス",
    "file": "chapter04-classes-and-instances.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 4,
      "なければなりません/なければならない": 0,
      "必須": 4,
      "重要です/重要な": 13,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 14,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 35,
    "word_count": 1224,
    "prescriptive_density": 28.594771241830063,
    "examples": {
      "べき/べきだ/べきです": [
        "...、SOLID原則と呼ばれる5つの基本原則があります。中でも単一責任原則（クラスは1つの責任のみを持つべき）と開放閉鎖原則（拡張に開かれ、修正に閉じているべき）は特に重要です。  カプセル化は単にデータを隠...",
        "...中でも単一責任原則（クラスは1つの責任のみを持つべき）と開放閉鎖原則（拡張に開かれ、修正に閉じているべき）は特に重要です。  カプセル化は単にデータを隠す技術ではなく、変更の影響を局所化し、再利用性とテス...",
        "...なります。  最も基本的な原則は**単一責任の原則**です。1つのクラスは1つの明確な責任のみを持つべきであり、これにより変更の理由が限定され、クラスの理解と保守が容易になります。次に重要なのは**データ..."
      ],
      "必須": [
        "...前提知識  本章を学習する前に、第3章で学んだオブジェクト指向の基礎概念を完全に理解していることが必須です。特に、クラスが「設計図」であり、オブジェクトがその「実体」であるという関係性、そしてカプセル化...",
        "...apsulation-basics.md -->   ## 本章の学習目標  ### 前提知識 **必須前提**： - 第3章のオブジェクト指向基礎概念の完全な理解 - 基本的なクラス設計と実装の経験 -...",
        "...throw new IllegalArgumentException(\"商品名は必須です\");         }         this.name = name;     }..."
      ],
      "重要です/重要な": [
        "...が「設計図」であり、オブジェクトがその「実体」であるという関係性、そしてカプセル化によるデータ保護の重要性を理解している必要があります。  また、基本的なクラスの設計と実装の経験を持っていることが望ましい...",
        "...を実現するかを理解します。`this`キーワードの意味と使用法、そしてメソッドオーバーロードの概念も重要な学習ポイントです。  技能習得の面では、クラスの基本構造であるフィールド、メソッド、コンストラクタを...",
        "...り深く理解していきましょう。  第3章で学習したBankAccountV3クラスを振り返ると、以下の重要な設計原則が適用されていました：  - **カプセル化**: privateフィールドとpublicメ..."
      ],
      "必要です/必要な/必要があります": [
        "...オブジェクトがその「実体」であるという関係性、そしてカプセル化によるデータ保護の重要性を理解している必要があります。  また、基本的なクラスの設計と実装の経験を持っていることが望ましいです。これには、複数のクラスを...",
        "...れ、publicメソッドを通じてのみアクセス可能 - **コンストラクタ**: オブジェクト生成時に必要な初期化を行う - **インスタンスメソッド**: オブジェクトの状態を操作する振る舞いを定義 - *...",
        "...は4つのアクセス修飾子を提供しており、これらを適切に使い分けることで、クラスの内部実装を隠蔽しながら必要な機能だけを外部に公開できます。各修飾子は、フィールドとメソッドの可視性を段階的に制御し、オブジェクト..."
      ]
    }
  },
  {
    "title": "第10章 コレクションフレームワーク",
    "file": "chapter10-collections.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 2,
      "重要です/重要な": 12,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 18,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 2,
      "ことが必要": 1,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 35,
    "word_count": 1956,
    "prescriptive_density": 17.893660531697343,
    "examples": {
      "必須": [
        "...ercises/chapter10/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── Studen...",
        "...ェネリクス」に進みましょう。    ## 本章の学習目標  ### 前提知識  本章を学習するための必須前提として、第8章で学んだ列挙型の概念と第9章で学んだレコードの活用方法を理解していることが必要です..."
      ],
      "重要です/重要な": [
        "...# 配列から始めよう  これまでの章で、複数のデータを扱うために配列を使ってきました。配列は基本的で重要なデータ構造ですが、実際のプログラム開発では、より柔軟なデータ管理が必要になることがあります。  まず...",
        "...edHashSet  Setの実装クラスは、内部構造の違いにより異なる特性を持ちます。データの順序が重要かどうか、検索や挿入の頻度、ソートが必要かどうかを考慮して選択します。  <span class=\"...",
        "...`  **使い分けの指針：** - **HashSet**: 最高の性能（O(1)）が必要で、順序は重要でない場合。重複チェックや集合演算に最適 - **TreeSet**: 常にソートされた状態を保ちた..."
      ],
      "必要です/必要な/必要があります": [
        "...習します。配列は固定サイズのデータ構造ですが、実際のプログラムでは動的にサイズが変化するデータを扱う必要が頻繁にあります。コレクションフレームワークは、このようなニーズに応える柔軟で強力なデータ構造を提供...",
        "...よる要素の走査 - コレクションの実践的な活用方法  ## 8.1 なぜコレクションフレームワークが必要か  ### 配列から始めよう  これまでの章で、複数のデータを扱うために配列を使ってきました。配列...",
        "...ってきました。配列は基本的で重要なデータ構造ですが、実際のプログラム開発では、より柔軟なデータ管理が必要になることがあります。  まず、配列を使った簡単な例から始めましょう：  <span class=\"..."
      ],
      "ことが重要": [
        "...ていることが必要です。特に、データを効率的に管理する必要性と、配列の限界について体験的に理解していることが重要です。また、配列を使った基本的なプログラミング経験があり、複数のデータを扱う処理に慣れていることが求...",
        "...な実装方法を習得します。  アルゴリズム的思考の観点では、データ構造と処理効率の密接な関係を理解することが重要です。なぜハッシュテーブルが高速な検索を可能にするのか、なぜ二分探索木が順序付きデータの管理に適して..."
      ],
      "ことが必要": [
        "...するための必須前提として、第8章で学んだ列挙型の概念と第9章で学んだレコードの活用方法を理解していることが必要です。特に、データを効率的に管理する必要性と、配列の限界について体験的に理解していることが重要です。..."
      ]
    }
  },
  {
    "title": "第5章 継承とポリモーフィズム",
    "file": "chapter05-inheritance-and-polymorphism.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 3,
      "必須": 2,
      "重要です/重要な": 6,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 22,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 33,
    "word_count": 3245,
    "prescriptive_density": 10.169491525423728,
    "examples": {
      "なければなりません/なければならない": [
        "...per(size, size);     }          // 正方形では幅と高さは常に同じでなければならない     @Override     public void setWidth(int width)...",
        "...} ```  この例は**リスコフの置換原則**に違反しています。子クラスは親クラスと置き換え可能でなければなりませんが、`Square`は`Rectangle`の期待される振る舞いを破壊してしまっています。  **解...",
        "...も基本的なルールとして、メソッド名、引数の型・数・順序が親クラスのメソッドと**完全に一致**していなければなりません。このシグネチャ（メソッド名とパラメータリスト）が一致しない場合、それはオーバーライドではなく、単な..."
      ],
      "必須": [
        "...を確認しておきましょう。まず、第4章で学んだカプセル化とアクセス制御の概念を完全に理解していることが必須です。特に、`public`、`private`、`protected`などのアクセス修飾子が果たす...",
        "...ercises/chapter05/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── Payrol..."
      ],
      "重要です/重要な": [
        "...### 到達目標  #### 知識理解目標  本章では、オブジェクト指向プログラミングの中核となる重要な概念を理解します。まず、継承の概念とis-a関係について学びます。継承は単なるコードの再利用技術では...",
        "...ードを使って親クラスの機能にアクセスする方法を習得します。  メソッドオーバーライドのルールと目的も重要な学習ポイントです。オーバーライドによって、子クラスは親クラスの動作を特殊化し、より具体的な振る舞いを...",
        "...ーバーライドの正確性を保証します。また、親クラスのコンストラクタを`super()`で呼びだす方法も重要で、これにより親クラスの初期化処理を適切に実行し、オブジェクトの整合性を保ちます。  さらに、親クラ..."
      ],
      "必要です/必要な/必要があります": [
        "...第5章 継承とポリモーフィズム  ## 本章の学習目標  ### 前提知識  本章を学習する前に、必要な前提知識を確認しておきましょう。まず、第4章で学んだカプセル化とアクセス制御の概念を完全に理解してい...",
        "...ed`などのアクセス修飾子が果たす役割と、それらが継承関係においてどのように機能するかを理解している必要があります。また、クラスの基本的な設計経験も不可欠です。これには、フィールドの定義、メソッドの実装、コンストラ...",
        "...つ、新しい機能を追加したり、既存の機能を変更（オーバーライド）したりできます。  ### なぜ継承が必要か？  たとえば、ゲームに登場するさまざまなキャラクタを考えてみましょう。「勇者」「魔法使い」「戦士..."
      ]
    }
  },
  {
    "title": "第12章 Stream APIと高度なコレクション操作",
    "file": "chapter12-advanced-collections.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 2,
      "なければなりません/なければならない": 0,
      "必須": 1,
      "重要です/重要な": 11,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 12,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 3,
      "ことが必要": 0,
      "注意が必要": 1,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 30,
    "word_count": 2341,
    "prescriptive_density": 12.815036309269543,
    "examples": {
      "べき/べきだ/べきです": [
        "...**サンプルコード12-9**</span>  ```java // スレッドセーフでない例（避けるべき） List<Integer> results = new ArrayList<>();  // ス...",
        "...d()`を使用するか、シーケンシャルストリームを使う必要があります。  ### 並列ストリームを使うべき場合  以下の条件がそろった場合に、並列ストリームの使用を検討しましょう：  1. **大量のデータ..."
      ],
      "必須": [
        "...学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。  **必須前提**： - 第10章のコレクションフレームワーク（List、Set、Map） - 第11章のジェ..."
      ],
      "重要です/重要な": [
        "...なコレクション操作  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。  **必須前提**： - 第10章のコレクションフレームワーク（List、Se...",
        "...パフォーマンスの話しくみを学びます。並列ストリーム（parallel stream）の理解と注意点も重要な学習ポイントで、マルチコア環境でのパフォーマンス向上とその落とし穴を学びます。  技能習得の面では、...",
        "...指針:**  リストの実装クラスを選択する際は、アプリケーションの使用パターンを正確に分析することが重要です。**ArrayList**は、要素の参照（取得）が多く、リストのサイズがあまり変化しない場合に最適..."
      ],
      "必要です/必要な/必要があります": [
        "...作  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。  **必須前提**： - 第10章のコレクションフレームワーク（List、Set、Map） -...",
        "...あることが推奨されます。特に、ループ処理とデータ変換の実装経験があると、Stream APIの利点と必要性をより深く理解できるでしょう。従来の命令型プログラミングでデータのフィルタリング、変換、集計を実装...",
        "...使った効率的なデータ処理技術を身につけます。複雑なデータ変換とフィルタリングの実装方法を学び、実務で必要となるデータ操作スキルを習得します。Collectorsクラスを使った柔軟なデータ収集方法を学び、並..."
      ],
      "ことが重要": [
        "...分けの指針:**  リストの実装クラスを選択する際は、アプリケーションの使用パターンを正確に分析することが重要です。**ArrayList**は、要素の参照（取得）が多く、リストのサイズがあまり変化しない場合に...",
        "...ray()`メソッドを使用します。型安全な配列を取得するためには、適切な配列コンストラクタを指定することが重要です。  <span class=\"listing-number\">**サンプルコード12-17**...",
        "...dList`, `HashSet`, `TreeSet`など、状況に応じて最適な実装クラスを選択することが重要です。 - **ラムダ式と`Comparator`**: ラムダ式を使うことで、独自のソートロジック..."
      ],
      "注意が必要": [
        "...では優位性を発揮します。ただし、ランダムアクセスが必要な場合は、パフォーマンスが大幅に低下することに注意が必要です。  ### `HashSet` vs `LinkedHashSet` vs `TreeSet`..."
      ]
    }
  },
  {
    "title": "第6章 不変性とfinalキーワード",
    "file": "chapter06-immutability-and-final.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 2,
      "重要です/重要な": 14,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 13,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 29,
    "word_count": 1064,
    "prescriptive_density": 27.25563909774436,
    "examples": {
      "必須": [
        "...章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第5章までに学習したオブジェクト指向プログラミングの基本概念を完全に習得していることが...",
        "...ercises/chapter06/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── Immuta..."
      ],
      "重要です/重要な": [
        "...inalキーワード  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第5章までに学習したオブジェクト指向プログラミングの基本概...",
        "...ングの基本概念を完全に習得していることが挙げられます。特に、クラスとインスタンスの関係、カプセル化の重要性、パッケージとアクセス制御のメカニズムについての深い理解が不可欠です。また、オブジェクトの状態（フ...",
        "...ド環境での共有データの問題や、オブジェクトの予期しない変更によるバグを経験したことがあると、不変性の重要性をより深く理解できるでしょう。大規模なプログラムでのデータの一貫性維持の難しさを理解していると、不..."
      ],
      "必要です/必要な/必要があります": [
        "...ド  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第5章までに学習したオブジェクト指向プログラミングの基本概念を完全に習得して...",
        "...ソッドを1つにまとめ、オブジェクトの内部構造を外部から隠蔽することです。  ### なぜカプセル化が必要か？  もし、クラスのフィールドが外部から自由にアクセスできてしまうと、どうなるでしょうか？  ##...",
        "...なります。使う側は公開されたインターフェイス（メソッド）だけを意識すればよく、内部の複雑な実装を知る必要がありません。これにより、クラスをライブラリとして配布したり、チーム開発で共有したりすることが容易になりま..."
      ]
    }
  },
  {
    "title": "第19章 GUIのイベント処理",
    "file": "chapter19-gui-event-handling.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 2,
      "なければなりません/なければならない": 1,
      "必須": 5,
      "重要です/重要な": 4,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 13,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 1,
      "ことが必要": 1,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 27,
    "word_count": 5943,
    "prescriptive_density": 4.543160020191822,
    "examples": {
      "べき/べきだ/べきです": [
        "...理解も重要で、なぜGUIの更新はEDT上で行わなければならないのか、長時間かかる処理をどのように扱うべきかを学びます。  技能習得の観点では、各種イベントリスナの適切な実装方法を習得します。単純なボタンク...",
        "...一度しか使わないクラスを定義する場合に便利です。  `ActionListener`のように、実装すべきメソッドが1つだけのインターフェイス（**関数型インターフェイス**）は、ラムダ式を使って非常に簡潔..."
      ],
      "なければなりません/なければならない": [
        "...理の選択ができます。EDTとスレッド安全性の基本概念の理解も重要で、なぜGUIの更新はEDT上で行わなければならないのか、長時間かかる処理をどのように扱うべきかを学びます。  技能習得の観点では、各種イベントリスナの..."
      ],
      "必須": [
        "...第19章 GUIのイベント処理  ## 本章の学習目標  ### 前提知識  本章を学習するための必須前提として、第18章で学んだGUIプログラミングの基礎をしっかりと習得していることが必要です。JFr...",
        "...アルタイムな双方向GUIアプリケーションの作成技術を習得します。     #### 基礎レベル課題（必須）  #### 課題1: インタラクティブ描画アプリケーション  マウス操作で図形を描画できるアプリ...",
        "...gbc.gridx = 2;         emailStatus = new JLabel(\"必須\");         emailStatus.setForeground(Color.GRAY);..."
      ],
      "重要です/重要な": [
        "...ャーによる画面構成、簡単なイベントリスナの実装などの基礎技術を理解し、実際に使用した経験があることが重要です。また、Java 8で導入されたラムダ式と関数型インターフェイスの基本的な理解も必要です。これらの機...",
        "...り簡潔で読みやすく記述できるようになるため、本章では積極的に活用します。インターフェイスの実装経験も重要で、特にリスナインターフェイスを実装する際の抽象メソッドのオーバーライドやアダプタクラスの使用方法を...",
        "...ーフェイスの特徴を学び、適切なイベント処理の選択ができます。EDTとスレッド安全性の基本概念の理解も重要で、なぜGUIの更新はEDT上で行わなければならないのか、長時間かかる処理をどのように扱うべきかを学..."
      ],
      "必要です/必要な/必要があります": [
        "...習するための必須前提として、第18章で学んだGUIプログラミングの基礎をしっかりと習得していることが必要です。JFrame、JButton、JTextFieldなどの基本的なコンポーネントの使い方、レイアウト...",
        "...があることが重要です。また、Java 8で導入されたラムダ式と関数型インターフェイスの基本的な理解も必要です。これらの機能により、イベント処理のコードをより簡潔で読みやすく記述できるようになるため、本章では積...",
        "...類と描画への応用：**  描画アプリケーションでは、マウスの操作状態に応じて異なるイベントを処理する必要があります：  1. **MouseListenerインターフェイス** - マウスボタンの状態変化を検出 2..."
      ],
      "ことが重要": [
        "...ネージャーによる画面構成、簡単なイベントリスナの実装などの基礎技術を理解し、実際に使用した経験があることが重要です。また、Java 8で導入されたラムダ式と関数型インターフェイスの基本的な理解も必要です。これら..."
      ],
      "ことが必要": [
        "...章を学習するための必須前提として、第18章で学んだGUIプログラミングの基礎をしっかりと習得していることが必要です。JFrame、JButton、JTextFieldなどの基本的なコンポーネントの使い方、レイア..."
      ]
    }
  },
  {
    "title": "第1章 Java入門と開発環境構築",
    "file": "chapter01-introduction.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 0,
      "重要です/重要な": 8,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 17,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 25,
    "word_count": 2285,
    "prescriptive_density": 10.940919037199125,
    "examples": {
      "重要です/重要な": [
        "...ェクトの概念から始まり、継承、ポリモーフィズム、インターフェイス、抽象クラスなど、オブジェクト指向の重要な概念を段階的に学習します。これらの概念を実際のコード例を通じて理解し、自分で設計・実装できるレベルま...",
        "...ング言語の1つです。その成功の背景には、設計段階から組み込まれた革新的な特徴があります。  もっとも重要な特徴は**プラットフォーム独立性**です。「Write Once, Run Anywhere（一度書...",
        "...エラーを大幅に減らすことができます。これは大規模なチーム開発において、コードの品質と安全性を保つ上で重要な役割を果たします。  さらに、Javaの**豊富なライブラリ**エコシステムは、開発効率を大幅に向上..."
      ],
      "必要です/必要な/必要があります": [
        "...きな助けとなります。  ### 学習目標  本章では、Javaプログラミングの学習を始めるにあたって必要な基礎知識と環境構築を学びます。知識理解の面では、まずJava言語の歴史的背景と設計思想を探っていきま...",
        "...**：意図的にエラーを発生させ、エラーメッセージから学習する - **設計思考**：「なぜこの技術が必要なのか」を常に考える - **総合活用**：複数の章の技術を組み合わせた実用例を考案・実装する  ##...",
        "...**の導入は、プログラマを煩雑なメモリ管理から解放しました。C言語では手動でメモリの確保と解放を行う必要があり、解放忘れによるメモリリークや、二重解放によるクラッシュが頻発していました。Javaでは使われなくな..."
      ]
    }
  },
  {
    "title": "第23章 ビルドとデプロイ",
    "file": "chapter23-build-and-deploy.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 3,
      "重要です/重要な": 9,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 12,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 1,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 25,
    "word_count": 2397,
    "prescriptive_density": 10.42970379641218,
    "examples": {
      "必須": [
        "# 第23章 ビルドとデプロイ  ## 本章の学習目標  ### 前提知識  **必須前提**： - 第1章のJava開発環境構築（javac、java コマンド） - 第15章のファイ...",
        "...ハードルが劇的に下がります。  ### 本章の学習目標  #### 前提知識  本章を学習するための必須前提として、第22章までに習得した総合的なJavaアプリケーション開発能力が必要です。これまでの章で...",
        "...ercises/chapter23/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── [関連ファイ..."
      ],
      "重要です/重要な": [
        "...での章で学んだすべての技術を統合し、実用的なアプリケーションを完成させられるレベルに達していることが重要です。また、ビルドプロセスの基本概念についての理解も必要で、ソースコードからクラスファイルへのコンパイル...",
        "...った一連の流れを概念的に理解していることが求められます。さらに、ソフトウェア配布に関する課題の理解も重要です。開発環境と実行環境の違い、依存関係の管理、プラットフォーム間の差異など、アプリケーションを他者に届...",
        "...の差異など、アプリケーションを他者に届ける際に直面する実際的な問題を認識していることで、本章の内容の重要性をより深く理解できます。  システム理解の前提として、コマンドライン操作の基本的なスキルが必要です..."
      ],
      "必要です/必要な/必要があります": [
        "...の対処    - アンインストールの困難さ  3. **セキュリティ要件**    - コード署名の必要性    - ネットワーク経由の配布時の改ざん防止    - 権限昇格の最小化    - サンドボッ...",
        "...本章を学習するための必須前提として、第22章までに習得した総合的なJavaアプリケーション開発能力が必要です。これまでの章で学んだすべての技術を統合し、実用的なアプリケーションを完成させられるレベルに達してい...",
        "...ョンを完成させられるレベルに達していることが重要です。また、ビルドプロセスの基本概念についての理解も必要で、ソースコードからクラスファイルへのコンパイル、依存関係の解決、パッケージングといった一連の流れを..."
      ],
      "ことが重要": [
        "...これまでの章で学んだすべての技術を統合し、実用的なアプリケーションを完成させられるレベルに達していることが重要です。また、ビルドプロセスの基本概念についての理解も必要で、ソースコードからクラスファイルへのコンパ..."
      ]
    }
  },
  {
    "title": "第7章 抽象クラスとインターフェイス",
    "file": "chapter07-abstract-classes-and-interfaces.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 3,
      "なければなりません/なければならない": 3,
      "必須": 1,
      "重要です/重要な": 7,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 9,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 1,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 24,
    "word_count": 2218,
    "prescriptive_density": 10.820559062218216,
    "examples": {
      "べき/べきだ/べきです": [
        "...基盤を提供しながら詳細な実装を子クラスに委ねるしくみです。インターフェイスは純粋な契約であり、実装すべきメソッドの仕様のみを定義します。これらの使い分け、is-a関係とcan-do関係の違い、Java 8...",
        "...*インターフェイス (Interface)** は、クラスがどのような**振る舞い（メソッド）を持つべきか**を定めた「**契約**」です。  インターフェイスは、メソッドのシグネチャ（名前、引数、戻り値...",
        "...と定数のみを定義でき、インスタンスフィールドを持つことはできません。実装は一切持たず、クラスが実装すべきメソッドの仕様だけを列挙します。  ### インターフェイスのルール  1.  `interface..."
      ],
      "なければなりません/なければならない": [
        "...て、1つでも抽象メソッドを持つクラスは、必ず抽象クラスとして`abstract`修飾子を付けて宣言しなければなりません。これはJavaの言語仕様で定められた強制的なルールであり、コンパイラはこのルールに従わないコードを...",
        "...ります。もし1つでも実装しない抽象メソッドが残っている場合、その子クラスもまた抽象クラスとして宣言しなければなりません。このメカニズムにより、抽象メソッドの実装を強制し、設計上の契約を確実に守らせることができます。...",
        "...5.  インターフェイスを実装したクラスは、そのインターフェイスが持つすべての抽象メソッドを実装しなければならない。 6.  クラスは**複数のインターフェイスを同時に実装できる**（`implements Int..."
      ],
      "必須": [
        "...ercises/chapter07/ ├── basic/              # 基礎課題（必須） │   ├── Shape/          # 図形抽象化 │   └── PaymentS..."
      ],
      "重要です/重要な": [
        "...めには、実装の詳細を隠蔽しながら共通のインターフェイスを提供する必要性を感じたことがあると、抽象化の重要性をより深く理解できるでしょう。大規模なシステムにおいて、異なる実装を統一的に扱う必要性を経験してい...",
        "...フェイス**です。これらは、プログラムの「抽象度」を上げ、より柔軟で拡張性の高い設計を実現するための重要なしくみです。  ## 7.2 抽象クラスと抽象メソッド  **抽象クラス (Abstract Cla...",
        "...、戻り値の型）だけを宣言します。  ### 抽象クラスのルール  抽象クラスを使う際には、いくつかの重要なルールを理解しておく必要があります。まず最も基本的なルールとして、1つでも抽象メソッドを持つクラスは..."
      ],
      "必要です/必要な/必要があります": [
        "...本章を学習するためには、第6章までのオブジェクト指向プログラミングの概念を完全に理解していることが必要です。特に、クラスの継承、メソッドのオーバーライド、ポリモーフィズムの基本的なしくみについての実践的な経...",
        "...れます。  さらに、より深い学習のためには、実装の詳細を隠蔽しながら共通のインターフェイスを提供する必要性を感じたことがあると、抽象化の重要性をより深く理解できるでしょう。大規模なシステムにおいて、異なる...",
        "...ると、抽象化の重要性をより深く理解できるでしょう。大規模なシステムにおいて、異なる実装を統一的に扱う必要性を経験していると、抽象クラスとインターフェイスの設計思想がより鮮明になります。  ### 知識理解..."
      ],
      "ことが必要": [
        "...知識  本章を学習するためには、第6章までのオブジェクト指向プログラミングの概念を完全に理解していることが必要です。特に、クラスの継承、メソッドのオーバーライド、ポリモーフィズムの基本的なしくみについての実践的..."
      ]
    }
  },
  {
    "title": "第14章 例外処理",
    "file": "chapter14-exception-handling.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 2,
      "なければなりません/なければならない": 0,
      "必須": 3,
      "重要です/重要な": 10,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 6,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 21,
    "word_count": 739,
    "prescriptive_density": 28.416779431664413,
    "examples": {
      "べき/べきだ/べきです": [
        "...て有益です。システムの信頼性に対する関心も重要で、エラーが発生したときにシステムがどのように振る舞うべきか、どのようにしてユーザーに適切なフィードバックを提供するかを考えた経験があると、例外処理の設計思想...",
        "...（バグ）が原因で発生するため、原則として`catch`するのではなく、コードを修正して発生自体を防ぐべきです。  ## 14.4 独自例外と例外の連鎖  ### 独自例外の作成とスロー  アプリケーション固有..."
      ],
      "必須": [
        "...章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第5章までに学んだ基本的なJavaプログラミング能力を十分に身につけていることが求めら...",
        "...ercises/chapter14/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── BasicE...",
        "...ースなど）を記録します。  適切な例外処理を実装することは、信頼性の高いソフトウェアを開発するための必須スキルです。"
      ],
      "重要です/重要な": [
        "...第14章 例外処理  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第5章までに学んだ基本的なJavaプログラミング能力を十分...",
        "...ッド、継承、ポリモーフィズムなどの核心概念の理解が含まれます。また、オブジェクト指向設計の実践経験も重要で、実際に複数のクラスを連携させたプログラムを作成した経験があることが期待されます。複数クラス・パッ...",
        "...ることが期待されます。複数クラス・パッケージでの開発経験も必要で、大規模なプログラムでのエラー管理の重要性を理解する基礎となります。  さらに、実務的な観点からの前提として、プログラム実行時に発生するさま..."
      ],
      "必要です/必要な/必要があります": [
        "...理  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第5章までに学んだ基本的なJavaプログラミング能力を十分に身につけているこ...",
        "...スを連携させたプログラムを作成した経験があることが期待されます。複数クラス・パッケージでの開発経験も必要で、大規模なプログラムでのエラー管理の重要性を理解する基礎となります。  さらに、実務的な観点からの...",
        "...プログラムが意図通りに動作しない場合や、予期せぬ入力や環境によってエラーが発生する経験は、例外処理の必要性を理解する上で極めて有益です。システムの信頼性に対する関心も重要で、エラーが発生したときにシステム..."
      ]
    }
  },
  {
    "title": "第15章 ファイルI/O",
    "file": "chapter15-file-io.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 1,
      "なければなりません/なければならない": 0,
      "必須": 1,
      "重要です/重要な": 10,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 6,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 18,
    "word_count": 1651,
    "prescriptive_density": 10.902483343428226,
    "examples": {
      "べき/べきだ/べきです": [
        "...ス向上のためのバッファリング機能も内蔵されており、現代的なJavaアプリケーションでは最優先で使用すべきAPIです。  これらのクラスは、内部バッファーを持つことで、`FileInputStream` や..."
      ],
      "必須": [
        "...章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第6章で学んだ例外処理の概念と技術を十分に習得していることが不可欠です。ファイルI/O..."
      ],
      "重要です/重要な": [
        "...章 ファイルI/O  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第6章で学んだ例外処理の概念と技術を十分に習得していること...",
        "...組み合わせて効率的なファイル処理を実装します。try-with-resourcesの理解と実践も特に重要で、リソースの管理において中心的な役割を果たします。  さらに、システム理解の観点からの前提として、...",
        "...イズ、作成日時、アクセス権など）についての基本的な知識が含まれます。文字エンコーディングの基本知識も重要で、UTF-8、Shift_JIS、ASCIIなどの主要なエンコーディングの特徴と違い、文字化けの問..."
      ],
      "必要です/必要な/必要があります": [
        "...O  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第6章で学んだ例外処理の概念と技術を十分に習得していることが不可欠です。ファ...",
        "...生する可能性があり、適切な例外処理が欠かせません。第10章までの基本的なJavaプログラミング能力も必要で、コレクション、ラムダ式、Stream APIなどの技術を組み合わせて効率的なファイル処理を実装し...",
        "...る安全なリソース管理  ファイルなどの外部リソースは、使い終わったら必ず「閉じる（closeする）」必要があります。これを怠ると、リソースリークなどの問題を引き起こします。Java 7以降で導入された`try-wi..."
      ]
    }
  },
  {
    "title": "第18章 GUIプログラミングの基礎",
    "file": "chapter18-gui-basics.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 1,
      "なければなりません/なければならない": 0,
      "必須": 3,
      "重要です/重要な": 5,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 8,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 1,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 18,
    "word_count": 6262,
    "prescriptive_density": 2.8744809964867457,
    "examples": {
      "べき/べきだ/べきです": [
        "...名クラスよりも簡潔にイベントリスナーを記述できます。`ActionListener`のように、実装すべきメソッドが1つだけのインターフェイス（関数型インターフェイス）に対して使用できます。  先ほどのボタ..."
      ],
      "必須": [
        "...## 前提知識  本章を学習するためには、第16章までに習得した総合的なJavaプログラミング能力が必須となります。とくに、クラスとオブジェクトの設計、継承とインターフェイス、例外処理、コレクションフレー...",
        "...で、これまでに設定されたすべての属性を反映してウィンドウが画面に表示されます。このメソッド呼び出しは必須で、これがないとウィンドウは非表示状態のままです。  このプログラムの各行を詳しく見ていきましょう：...",
        "...ercises/chapter18/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── BasicG..."
      ],
      "重要です/重要な": [
        "...的なプログラムを作成できる能力が求められます。また、イベント処理の基本概念について理解していることも重要です。ユーザーの操作（ボタンクリック、キー入力など）に応じてプログラムが反応するという、これまでのコンソ...",
        "...安全性](chapter18c-edt-thread-safety.md) - EDTとは何か、なぜ重要なのか - SwingUtilities.invokeLater()の使用方法 - SwingWork...",
        "...Part Bでイベント駆動プログラミングの基礎を習得 3. Part CでEDTとスレッド安全性の重要概念を学習 4. Part Dでカスタムコンポーネント作成技術を習得 5. Part Eの演習課題で..."
      ],
      "必要です/必要な/必要があります": [
        "...れまでのコンソールアプリケーションとは異なるプログラミングパラダイムを理解する準備ができていることが必要です。  さらに、オブジェクト指向設計の実践経験があることで、GUIコンポーネントの階層構造や、イベント...",
        "...等に配置するレイアウトマネージャーです。電卓のボタン配置や、カレンダーの日付表示など、規則的な配置が必要な場合に最適です。  GridLayoutの特徴： - すべてのセルが同じサイズに統一される - コン...",
        "...のアクセス（表示の更新、プロパティの変更、イベント処理など）は、原則として**EDT上でのみ**行う必要があります。これにより以下の利点があります：  1. **スレッド安全性の確保**: 複数のスレッドからの同時..."
      ],
      "ことが必要": [
        "...う、これまでのコンソールアプリケーションとは異なるプログラミングパラダイムを理解する準備ができていることが必要です。  さらに、オブジェクト指向設計の実践経験があることで、GUIコンポーネントの階層構造や、イベ..."
      ]
    }
  },
  {
    "title": "第21章 ユニットテストと品質保証",
    "file": "chapter21-unit-testing.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 2,
      "なければなりません/なければならない": 0,
      "必須": 4,
      "重要です/重要な": 8,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 4,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 18,
    "word_count": 1178,
    "prescriptive_density": 15.280135823429541,
    "examples": {
      "べき/べきだ/べきです": [
        "...#### 3. 動く「仕様書」  テストコードは「このメソッドは、こういう入力に対して、こう動作するべきだ」という仕様をコードで表現したものです。**常に最新の正しい仕様を示す「生きたドキュメント」**とし...",
        "...存在しないクラスやメソッドに対してテストを書きます。このテストは当然失敗しますが、これが「何を実装すべきか」を明確にする仕様となります。  <span class=\"listing-number\">**サ..."
      ],
      "必須": [
        "# 第21章 ユニットテストと品質保証  ## 本章の学習目標  ### 前提知識  **必須前提**： - 第4章のクラスとインスタンス（メソッド、コンストラクタ） - 第7章の抽象クラスとイ...",
        "...erviceがUserRepositoryを内部で直接生成しているため、テスト時にデータベース接続が必須となってしまいます。  <span class=\"listing-number\">**サンプルコード...",
        "...インジェクションは、オプショナルな依存性や、オブジェクト生成後に依存性を変更したい場合に便利ですが、必須の依存性には不適切です。  <span class=\"listing-number\">**サンプルコ..."
      ],
      "重要です/重要な": [
        "...ソフトウェア開発プロセスの基本理解  ### 学習目標  **知識理解目標**： - 単体テストの重要性と品質保証における役割 - テスト駆動開発（TDD）の思想と実践方法 - 疎結合設計とDepend...",
        "...きる  ## 21.1 はじめに  ソフトウェア開発において、品質の高いコードを維持することは極めて重要です。本章では、単体テスト（ユニットテスト）を主題とし、なぜテストが重要なのか、そして良いテストを書くた...",
        "...コードを維持することは極めて重要です。本章では、単体テスト（ユニットテスト）を主題とし、なぜテストが重要なのか、そして良いテストを書くために不可欠な「疎結合」という設計思想と、それを実現する「Depende..."
      ],
      "必要です/必要な/必要があります": [
        "...本です。これにより、テストの意図が明確になります。  - **Arrange（準備）**: テストに必要な条件を整えます - **Act（実行）**: テストしたいメソッドを呼び出します - **Asser...",
        "...DI)**は、疎結合を実現するための具体的な設計テクニックです。その原則は、「**あるオブジェクトが必要とする別のオブジェクト（依存オブジェクト）を、内部で生成するのではなく、外部から与える（注入する）*...",
        "...:** - `final`キーワードを付与でき、依存関係が不変になります - オブジェクト生成時に、必要な依存性がすべて揃っていることが保証されます  #### 2. セッターインジェクション  セッターメ..."
      ]
    }
  },
  {
    "title": "第13章 ラムダ式と関数型インターフェイス",
    "file": "chapter13-lambda-and-functional-interfaces.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 2,
      "なければなりません/なければならない": 0,
      "必須": 3,
      "重要です/重要な": 7,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 3,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 1,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 16,
    "word_count": 2811,
    "prescriptive_density": 5.691924581999288,
    "examples": {
      "べき/べきだ/べきです": [
        "...al Interface）** として扱われます。  **関数型インターフェイス**とは、**実装すべき抽象メソッドが1つだけ**定義されているインターフェイスのことです。`@FunctionalInte...",
        "...getName)); ```  `ActionListener`や`Comparator`も、実装すべき抽象メソッドが実質的に1つだけですので、関数型インターフェイスです。そのため、ラムダ式で置き換えるこ..."
      ],
      "必須": [
        "...ercises/chapter13/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── BasicL...",
        "...章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第11章までに学んだオブジェクト指向プログラミングとジェネリクスの概念を十分に習得して...",
        "...est(user.getName())) {             errors.add(\"名前は必須です\");         }         if (!validEmail.test(user...."
      ],
      "重要です/重要な": [
        "...」に進みましょう。  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第11章までに学んだオブジェクト指向プログラミングとジェネ...",
        "...ンターフェイスとの関係性を理解する上で基礎となります。コレクションフレームワークの実践的な使用経験も重要で、List、Set、Mapの操作を通じてラムダ式の実用性を実感できます。  さらに、概念的な前提と...",
        "...やって」ではなく「何を」するかを表現する宣言的なスタイルが特徴です。コードの簡潔性と可読性への意識も重要で、ラムダ式や関数型インターフェイスを用いることで、より簡潔で表現力の高いコードを書けるようになるた..."
      ],
      "必要です/必要な/必要があります": [
        "...。  ## 本章の学習目標  ### 前提知識  本章を学習するためには、いくつかの重要な前提知識が必要です。まず必須の前提として、第11章までに学んだオブジェクト指向プログラミングとジェネリクスの概念を十分...",
        "...rator組み合わせ**  実際の業務では、単一の条件だけでなく、複数の条件を組み合わせた並び替えが必要になることが多くあります。Comparatorインターフェイスでは、`thenComparing`メ...",
        "...sword())) {             errors.add(\"パスワードは8文字以上である必要があります\");         }                  return new Validati..."
      ],
      "ことが重要": [
        "...ードを書くことができます。しかし、実務では可読性とパフォーマンスのバランスを考慮し、適切に使い分けることが重要です。  これらの機能を使いこなすことで、コードの可読性が向上し、より宣言的で簡潔なプログラミングが..."
      ]
    }
  },
  {
    "title": "第22章 ドキュメントと外部ライブラリ",
    "file": "chapter22-documentation-and-libraries.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 6,
      "重要です/重要な": 2,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 7,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 15,
    "word_count": 3034,
    "prescriptive_density": 4.943968358602505,
    "examples": {
      "必須": [
        "# 第22章 ドキュメントと外部ライブラリ  ## 本章の学習目標  ### 前提知識  **必須前提**： - 第4章のクラスとインスタンス（基本的なOOPの概念） - 第14章の例外処理（try...",
        "...private final long id;          /** タスクのタイトル（必須、最大100文字） */     private String title;          /*...",
        "...throw new IllegalArgumentException(\"タイトルは必須です\");         }         if (priority == null) {..."
      ],
      "重要です/重要な": [
        "...解  ### 学習目標  **知識理解目標**： - Javadocによるドキュメント生成の仕組みと重要性 - 外部ライブラリの選択基準とライセンスの考慮事項 - Maven、Gradleなどのビルドツー...",
        "...事項 - Maven、Gradleなどのビルドツールの役割と概念 - 依存関係管理の原則と版数管理の重要性  **技能習得目標**： - 適切なJavadocコメントの記述とAPI仕様書の生成 - Gso..."
      ],
      "必要です/必要な/必要があります": [
        "...INE arguments: `-encoding UTF-8 -charset UTF-8` - 必要に応じて `-author`、`-version` オプションを追加  ## 22.2 外部ライブラ...",
        "...ブラリが存在します。  ### クラスパスとは  Java仮想マシン（JVM）がプログラムの実行時に必要なクラスファイル（`.class`ファイルや`.jar`ファイル）を探すための場所（ディレクトリやファ...",
        "...パス**と呼びます。外部ライブラリを利用するには、そのライブラリのJARファイルをクラスパスに含める必要があります。  ### 依存関係管理ツール：Maven  手動でJARファイルをダウンロードし、クラスパスを設..."
      ]
    }
  },
  {
    "title": "第9章 レコード(Records)とデータ指向プログラミング",
    "file": "chapter09-records.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 3,
      "重要です/重要な": 3,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 8,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 14,
    "word_count": 5428,
    "prescriptive_density": 2.5792188651436994,
    "examples": {
      "必須": [
        "...ード(Records)とデータ指向プログラミング  ## 本章の学習目標  ### 前提知識  **必須前提**： - 第6章の不変性とfinalキーワードの概念 - 第4章のクラスとインスタンス（コンス...",
        "...模システム**: 保守性と拡張性の向上  これらの技術は、現代のJavaアプリケーション開発において必須のスキルとなっており、効率的で安全なソフトウェアの構築に大きく貢献します。  ## 章末演習  本章...",
        "...ercises/chapter09/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── Point...."
      ],
      "重要です/重要な": [
        "...# JSON統合（Jackson）  現代のアプリケーションでは、RecordとJSON処理の統合が重要です。RecordsはJacksonなどのJSONライブラリと優れた互換性を持ち、アノテーションを使用し...",
        "...るイベントのストリームから現在の状態（スナップショット）を再構築します。これは、監査ログや履歴管理が重要なシステムで使用される高度なパターンです。  <span class=\"listing-number\"...",
        "...ータ指向プログラミングは、単なる構文糖ではなく、Javaプログラミングの新しいパラダイムを可能にする重要な技術です。特に以下の領域で威力を発揮します：  - **API開発**: 型安全で簡潔なデータ転送..."
      ],
      "必要です/必要な/必要があります": [
        "...データクラスやデータキャリアと呼ばれる）を作るには、多くの定型的なコード（ボイラープレートコード）が必要でした。  -   `private final`なフィールド -   全フィールドを初期化するコン...",
        "...ような完全なクラス定義に展開されます。この自動展開により、開発者は大量のボイラープレートコードを書く必要がなくなります。  <span class=\"listing-number\">**サンプルコード9-...",
        "...クラスに継承させたりすることはできません。 - **可変オブジェクトには不向き**: 状態を変更する必要があるオブジェクトには使えません。  ## 12.2 Recordの使い方  `Record`の使い方は、..."
      ]
    }
  },
  {
    "title": "第8章 列挙型(Enums)",
    "file": "chapter08-enums.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 1,
      "なければなりません/なければならない": 0,
      "必須": 3,
      "重要です/重要な": 4,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 4,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 1,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 13,
    "word_count": 761,
    "prescriptive_density": 17.082785808147175,
    "examples": {
      "べき/べきだ/べきです": [
        "...定数をenumにすれば良いわけではなく、値の集合が明確に定義でき、将来的にも変更が少ない場合に適用すべきです。また、Strategy PatternやState Patternといったデザインパターンとenu..."
      ],
      "必須": [
        "# 第8章 列挙型(Enums)  ## 本章の学習目標  ### 前提知識  **必須前提**： - 第4章のクラスとインスタンス（コンストラクタ、メソッド、フィールド） - 第7章の抽...",
        "...ercises/chapter13/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── DayOfW...",
        "...# 前提知識  本章を学習するためには、第7章で学んだfinalキーワードの理解とクラス設計の経験が必須となります。特に、不変性の概念と、なぜ値を変更できないことが設計上有益なのかを理解していることが重要..."
      ],
      "重要です/重要な": [
        "...必須となります。特に、不変性の概念と、なぜ値を変更できないことが設計上有益なのかを理解していることが重要です。また、定数の概念と`static final`フィールドを使った基本的な定数定義の経験があることで...",
        "...を防ぎ、実行時エラーを大幅に削減できます。  enumのインスタンス性とsingleton性の理解も重要なポイントです。各enum定数は、そのenum型の唯一のインスタンスとして存在し、JVMによって管理さ...",
        "...+ Planet.EARTH.surfaceGravity());     } } ```  **重要なポイント:**  1. **コンストラクタの役割**: enumのコンストラクタは暗黙的に`priv..."
      ],
      "必要です/必要な/必要があります": [
        "...念と`static final`フィールドを使った基本的な定数定義の経験があることで、enumがなぜ必要なのか、従来の定数定義の何が問題なのかを実感を持って理解できます。オブジェクト指向の基本概念、特にクラ...",
        "...の色（赤青黄）」のように、値の範囲が限定されているものを扱うのに最適です。  ### なぜenumが必要なのか？  `enum`がない場合、このような定数は`public static final int`...",
        "...\");     } } ``` `case`句では、`DayOfWeek.MONDAY`のように書く必要はなく、`MONDAY`とだけ書ける点に注意してください。  ## 13.3 フィールドとメソッドを..."
      ],
      "ことが重要": [
        "...経験が必須となります。特に、不変性の概念と、なぜ値を変更できないことが設計上有益なのかを理解していることが重要です。また、定数の概念と`static final`フィールドを使った基本的な定数定義の経験があるこ..."
      ]
    }
  },
  {
    "title": "第11章 ジェネリクス",
    "file": "chapter11-generics.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 2,
      "重要です/重要な": 5,
      "覚えておきたい/覚えておく": 1,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 5,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 13,
    "word_count": 958,
    "prescriptive_density": 13.569937369519835,
    "examples": {
      "必須": [
        "...ercises/chapter09/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── Pair.j...",
        "...APIと高度なコレクション操作」に進みましょう。   ## 本章の学習目標  ### 前提知識 **必須前提**： - 第8章のコレクションフレームワークの理解と実践経験 - 型システムの基本的な理解 -..."
      ],
      "重要です/重要な": [
        "...ネリクス**です。なぜこのような記法が必要なのでしょうか？実は、これはJavaの進化の過程で生まれた重要な機能なのです。  ### まずは問題を体験してみよう  ジェネリクスがない場合にどんな問題が起きるか...",
        "...なる 3. コードの意図が明確になる（「文字列のリスト」であることが一目瞭然）  ### 型安全性の重要性  プログラミング言語における型システムの目的は、プログラムの正しさをコンパイル時に検証し、実行時...",
        "...に対して適用できる  ### 型消去（Type Erasure）のしくみ  Javaのジェネリクスの重要な特徴の1つが「型消去」です。これは、コンパイル時にジェネリック型情報が検査された後、実行時にはその情..."
      ],
      "覚えておきたい/覚えておく": [
        "...); // 文字列も数値も、何でも入ってしまう！          // 取り出すときに、本来の型を覚えておいて、キャストする必要がある         String message = (String) lis..."
      ],
      "必要です/必要な/必要があります": [
        "...ジェネリクスを使った柔軟で保守性の高いライブラリが作成できる    ## 9.1 なぜジェネリクスが必要なのか？  ### 第8章で見た不思議な記法  前章でコレクションを学習したとき、以下のような記法を見...",
        "...ger>(); ```  この`<>`で囲まれた部分が**ジェネリクス**です。なぜこのような記法が必要なのでしょうか？実は、これはJavaの進化の過程で生まれた重要な機能なのです。  ### まずは問題を...",
        "...(i);                          // 文字列として使いたい場合は型変換が必要             String language = (String) item;  //..."
      ]
    }
  },
  {
    "title": "第17章 ネットワークプログラミング",
    "file": "chapter17-network-programming.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 1,
      "重要です/重要な": 6,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 5,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 12,
    "word_count": 2390,
    "prescriptive_density": 5.02092050209205,
    "examples": {
      "必須": [
        "...ercises/chapter17/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── Simple..."
      ],
      "重要です/重要な": [
        "...きる  ## 17.1 はじめに  現代のソフトウェア開発において、ネットワーク通信は避けて通れない重要な技術です。Webアプリケーション、モバイルアプリ、IoTデバイスなど、ほとんどのアプリケーションは何...",
        "...的なサーバーでは、複数のクライアントを同時に処理する必要があります。  **マルチクライアント対応の重要性**： - 同時接続性：複数のクライアントが同時にサービスを利用できる - スケーラビリティ：クラ...",
        "...ionやHTTPクライアントライブラリを使用することが一般的ですが、基礎となる仕組みを理解することは重要です。  <span class=\"listing-number\">**サンプルコード17-4**</s..."
      ],
      "必要です/必要な/必要があります": [
        "...ラミング  ## 本章の学習目標  ### 前提知識  本章を学習するための前提として、以下の知識が必要です。  **技術的前提**： - 第15章のファイルI/Oとストリームの理解（InputStreamと...",
        "...xceptionなどの処理） - 第16章のマルチスレッドプログラミングの基礎（並行サーバーの実装で必要） - 基本的なコンピュータネットワークの概念（IPアドレス、ポート番号の意味）  **概念的前提*...",
        "...一度に一つのクライアントしか処理できません。実用的なサーバーでは、複数のクライアントを同時に処理する必要があります。  **マルチクライアント対応の重要性**： - 同時接続性：複数のクライアントが同時にサービスを..."
      ]
    }
  },
  {
    "title": "第20章 高度なGUIコンポーネント",
    "file": "chapter20-advanced-gui.md",
    "pattern_counts": {
      "心構え": 0,
      "べき/べきだ/べきです": 0,
      "なければなりません/なければならない": 0,
      "必須": 2,
      "重要です/重要な": 0,
      "覚えておきたい/覚えておく": 0,
      "理解しておけば十分です": 0,
      "必要です/必要な/必要があります": 0,
      "することが大切": 0,
      "しなければいけません": 0,
      "ことが重要": 0,
      "ことが必要": 0,
      "注意が必要": 0,
      "理解する必要": 0,
      "把握する必要": 0,
      "考える必要": 0,
      "検討する必要": 0
    },
    "total_prescriptive": 2,
    "word_count": 124,
    "prescriptive_density": 16.129032258064516,
    "examples": {
      "必須": [
        "# 第20章 高度なGUIコンポーネント  ## 本章の学習目標  ### 前提知識  **必須前提**： - 第18章のGUIプログラミングの基礎（Swing、AWT、基本コンポーネント） -...",
        "...ercises/chapter20/ ├── basic/              # 基礎課題（必須） │   ├── README.md       # 詳細な課題説明 │   └── Advanc..."
      ]
    }
  }
]