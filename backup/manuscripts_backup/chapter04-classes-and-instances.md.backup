# 第4章 クラスとインスタンス

## 本章の学習目標

### 前提知識

本章を学習する前に、第3章で学んだオブジェクト指向の基礎概念を完全に理解していることが必須です。特に、クラスが「設計図」であり、オブジェクトがその「実体」であるという関係性、そしてカプセル化によるデータ保護の重要性を理解している必要があります。

また、基本的なクラスの設計と実装の経験を持っていることが望ましいです。これには、複数のクラスを含むプログラムの作成経験や、オブジェクト間の関係性を実装した経験が含まれます。これらの経験があることで、本章で扱うより高度な設計技法をスムーズに理解できます。

### 学習目標

本章では、オブジェクト指向プログラミングの核心となる「クラスとインスタンス」の詳細なメカニズムを学習します。まず、知識理解の面では、クラスとインスタンス（オブジェクト）の関係性を深く理解し、コンストラクタがオブジェクト生成時に果たす役割とその種類を学びます。また、インスタンス変数とインスタンスメソッドがどのように連携してオブジェクトの状態と振る舞いを実現するかを理解します。`this`キーワードの意味と使用法、そしてメソッドオーバーロードの概念も重要な学習ポイントです。

技能習得の面では、クラスの基本構造であるフィールド、メソッド、コンストラクタを実際に実装できるようになることを目指します。特に、適切なコンストラクタの定義方法、`this`キーワードを使った明確なコード記述、メソッドオーバーロードの効果的な活用方法を身につけます。インスタンス変数の適切な初期化方法も、安全なプログラムを書く上で不可欠なスキルです。

さらに、設計能力の観点からは、責任が明確なクラスの設計方法を学びます。適切なカプセル化による情報隠蔽を実現し、ほかの開発者が使いやすいクラスインターフェイスを設計する能力を養います。

最終的には、実世界の概念をクラスとして適切にモデル化し、複数のコンストラクタを持つ柔軟なクラスを作成できます。インスタンス変数とメソッドを適切に組み合わせ、ほかのクラスから利用しやすい、保守性の高いクラスを設計・実装できるようになることが、本章の最終的な到達目標です。



## 章の構成

本章は、以下のパートで構成されています：

### [Part A: カプセル化の基礎](chapter04a-encapsulation-basics.md)
- カプセル化の基本概念
- アクセス修飾子の詳細
- getter/setterメソッドのベストプラクティス
- 実践的なクラス設計例

### [Part B: 章末演習](chapter04b-exercises.md)
- 基礎レベル課題：カプセル化の基本実践
- 応用レベル課題：複数クラスの連携
- 発展レベル課題：設計パターンの適用
- 挑戦レベル課題：実務レベルのシステム設計

## 学習の進め方

1. Part Aで基本概念と実装方法を学習
2. 各パートのサンプルコードを実際に動かして理解を深める
3. Part Bの演習課題に段階的に取り組む
4. 解答例と比較して、より良い設計を学ぶ

## 基本的なクラスとインスタンスの例

本章の詳細な内容はPart Aで扱いますが、ここでは基本的なクラスとインスタンスの関係を簡単な例で確認しておきましょう：

### 銀行口座クラスの基本構造

以下は、銀行口座を表現するシンプルなクラスの例です。このクラスはカプセル化の基本的な原則に従って設計されています：

```java
// BankAccount.java
public class BankAccount {
    // インスタンス変数（プライベートにして直接アクセスを防ぐ）
    private String accountNumber;
    private String ownerName;
    private double balance;
    
    // コンストラクタ（新しい口座を作成）
    public BankAccount(String accountNumber, String ownerName, double initialBalance) {
        this.accountNumber = accountNumber;
        this.ownerName = ownerName;
        this.balance = initialBalance;
    }
    
    // 入金メソッド
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println(amount + "円を入金しました。");
        } else {
            System.out.println("入金額は正の値である必要があります。");
        }
    }
    
    // 出金メソッド
    public boolean withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println(amount + "円を出金しました。");
            return true;
        } else {
            System.out.println("出金できません。");
            return false;
        }
    }
    
    // 残高照会（getter）
    public double getBalance() {
        return balance;
    }
    
    // 口座情報の表示
    public void displayInfo() {
        System.out.println("口座番号: " + accountNumber);
        System.out.println("名義人: " + ownerName);
        System.out.println("残高: " + balance + "円");
    }
}

// 使用例
public class BankAccountTest {
    public static void main(String[] args) {
        // インスタンスの作成（新しい口座を開設）
        BankAccount myAccount = new BankAccount("12345", "山田太郎", 10000);
        
        // メソッドを使った操作
        myAccount.displayInfo();
        myAccount.deposit(5000);
        myAccount.withdraw(3000);
        
        // 現在の残高を確認
        System.out.println("現在の残高: " + myAccount.getBalance() + "円");
    }
}
```

**このコードのポイント**：
- **カプセル化**: インスタンス変数はprivateで保護され、publicメソッドを通じてのみアクセス可能
- **コンストラクタ**: オブジェクト生成時に必要な初期化を行う
- **インスタンスメソッド**: オブジェクトの状態を操作する振る舞いを定義
- **バリデーション**: メソッド内で適切な値の検証を行い、不正な操作を防ぐ

本章を通じて、オブジェクト指向プログラミングの核心である「データと処理の適切な組み合わせ」を実践的に身につけていきましょう。