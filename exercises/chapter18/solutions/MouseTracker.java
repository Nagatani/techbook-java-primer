/**
 * 第18章 GUI イベント処理応用
 * 演習課題: MouseTracker.java
 * 
 * 【課題概要】
 * マウスの詳細な動作を追跡・分析できるアプリケーションを作成してください。
 * 
 * 【要求仕様】
 * 1. リアルタイムマウス座標表示
 * 2. マウスの移動軌跡の記録と表示
 * 3. クリック位置のマーキング（左、右、中央ボタン別）
 * 4. ダブルクリック・トリプルクリックの検出
 * 5. マウスドラッグ操作の軌跡表示
 * 6. マウス移動速度の計算と表示
 * 7. マウスホバー時間の測定
 * 8. マウスイベントログの記録と出力
 * 9. マウスジェスチャー認識機能
 * 10. 統計情報の表示（総移動距離、クリック数等）
 * 
 * 【学習ポイント】
 * - MouseListener、MouseMotionListener の詳細な実装
 * - MouseWheelListener によるスクロールイベント処理
 * - Timer クラスによる時間管理とタイマー処理
 * - Point クラスと座標計算
 * - Graphics2D による軌跡の描画
 * - 数学的計算（距離、速度、角度）
 * - データ構造（List、Queue）によるイベント履歴管理
 * 
 * 【実装のヒント】
 * 1. ArrayList で座標履歴を管理
 * 2. System.currentTimeMillis() で時間測定
 * 3. Point.distance() で移動距離計算
 * 4. Timer で定期的な統計更新
 * 5. Custom painting で軌跡を描画
 * 
 * 【よくある間違いと対策】
 * - 大量のマウスイベントによるメモリ不足
 *   → 古いデータの定期的な削除、CircularBuffer の使用
 * - 描画の負荷による動作の重さ
 *   → 描画の最適化、不要な再描画の抑制
 * - 座標計算の精度問題
 *   → double 型での計算、適切な丸め処理
 * - イベントタイミングの同期問題
 *   → SwingUtilities.invokeLater() での適切な処理
 * 
 * 【段階的な実装指針】
 * 1. 基本的なマウス座標表示機能
 * 2. クリックイベントの記録と表示
 * 3. 移動軌跡の記録と描画機能
 * 4. 速度計算と統計情報の追加
 * 5. ジェスチャー認識機能の実装
 * 6. ログ機能とデータ出力機能
 * 7. UI の改善と詳細設定機能
 * 8. パフォーマンス最適化
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Path2D;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

public class MouseTracker extends JFrame {
    // トラッキングデータ
    private List<TrackPoint> trackPoints;
    private Queue<MouseEvent> eventQueue;
    private Map<Integer, ClickInfo> clickCounts;
    private Point lastPosition;
    private long lastMoveTime;
    private boolean isTracking = true;
    
    // 統計データ
    private double totalDistance = 0;
    private int totalClicks = 0;
    private long sessionStartTime;
    private double currentSpeed = 0;
    private Point hoverStart;
    private long hoverStartTime;
    
    // UI コンポーネント
    private TrackingPanel trackingPanel;
    private JLabel coordinateLabel;
    private JLabel speedLabel;
    private JLabel distanceLabel;
    private JLabel clickLabel;
    private JLabel sessionLabel;
    private JTextArea eventLogArea;
    private JSlider trailLengthSlider;
    private JCheckBox showTrailCheckBox;
    private JCheckBox showClicksCheckBox;
    private JCheckBox showSpeedCheckBox;
    private JButton clearButton;
    private JButton saveButton;
    private JButton pauseButton;
    
    // 設定
    private int maxTrailLength = 1000;
    private boolean showTrail = true;
    private boolean showClicks = true;
    private boolean showSpeed = true;
    private Color trailColor = Color.BLUE;
    private Color clickColor = Color.RED;
    
    // タイマー
    private Timer statisticsTimer;
    private Timer hoverTimer;
    
    // ジェスチャー認識
    private GestureRecognizer gestureRecognizer;
    
    public MouseTracker() {
        trackPoints = Collections.synchronizedList(new ArrayList<>());
        eventQueue = new ConcurrentLinkedQueue<>();
        clickCounts = new HashMap<>();
        sessionStartTime = System.currentTimeMillis();
        
        initializeComponents();
        setupLayout();
        setupEventHandlers();
        setupTimers();
        setupWindow();
        
        gestureRecognizer = new GestureRecognizer();
        
        resetStatistics();
    }
    
    private void initializeComponents() {
        // トラッキングパネル
        trackingPanel = new TrackingPanel();
        trackingPanel.setPreferredSize(new Dimension(600, 400));
        trackingPanel.setBorder(BorderFactory.createTitledBorder(\"マウストラッキングエリア\"));
        
        // 情報表示ラベル
        coordinateLabel = new JLabel(\"座標: (0, 0)\");\n        speedLabel = new JLabel(\"速度: 0.0 px/s\");\n        distanceLabel = new JLabel(\"総移動距離: 0.0 px\");\n        clickLabel = new JLabel(\"クリック数: 0\");\n        sessionLabel = new JLabel(\"セッション時間: 00:00:00\");\n        \n        // イベントログエリア\n        eventLogArea = new JTextArea(8, 30);\n        eventLogArea.setEditable(false);\n        eventLogArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 10));\n        \n        // コントロールパネル\n        trailLengthSlider = new JSlider(10, 5000, maxTrailLength);\n        trailLengthSlider.setMajorTickSpacing(1000);\n        trailLengthSlider.setMinorTickSpacing(100);\n        trailLengthSlider.setPaintTicks(true);\n        trailLengthSlider.setPaintLabels(true);\n        \n        showTrailCheckBox = new JCheckBox(\"軌跡表示\", showTrail);\n        showClicksCheckBox = new JCheckBox(\"クリック表示\", showClicks);\n        showSpeedCheckBox = new JCheckBox(\"速度表示\", showSpeed);\n        \n        clearButton = new JButton(\"クリア\");\n        saveButton = new JButton(\"保存\");\n        pauseButton = new JButton(\"一時停止\");\n    }\n    \n    private void setupLayout() {\n        setLayout(new BorderLayout());\n        \n        // メインパネル\n        add(trackingPanel, BorderLayout.CENTER);\n        \n        // 情報パネル（上部）\n        JPanel infoPanel = new JPanel(new GridLayout(1, 5, 10, 5));\n        infoPanel.setBorder(BorderFactory.createTitledBorder(\"リアルタイム情報\"));\n        infoPanel.add(coordinateLabel);\n        infoPanel.add(speedLabel);\n        infoPanel.add(distanceLabel);\n        infoPanel.add(clickLabel);\n        infoPanel.add(sessionLabel);\n        \n        add(infoPanel, BorderLayout.NORTH);\n        \n        // サイドパネル（右側）\n        JPanel sidePanel = createSidePanel();\n        add(sidePanel, BorderLayout.EAST);\n        \n        // コントロールパネル（下部）\n        JPanel controlPanel = createControlPanel();\n        add(controlPanel, BorderLayout.SOUTH);\n    }\n    \n    private JPanel createSidePanel() {\n        JPanel sidePanel = new JPanel(new BorderLayout());\n        sidePanel.setPreferredSize(new Dimension(300, 0));\n        \n        // 設定パネル\n        JPanel settingsPanel = new JPanel(new GridBagLayout());\n        settingsPanel.setBorder(BorderFactory.createTitledBorder(\"設定\"));\n        \n        GridBagConstraints gbc = new GridBagConstraints();\n        gbc.insets = new Insets(5, 5, 5, 5);\n        gbc.anchor = GridBagConstraints.WEST;\n        \n        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;\n        settingsPanel.add(new JLabel(\"軌跡長:\"), gbc);\n        gbc.gridy = 1;\n        settingsPanel.add(trailLengthSlider, gbc);\n        \n        gbc.gridy = 2; gbc.gridwidth = 1;\n        settingsPanel.add(showTrailCheckBox, gbc);\n        gbc.gridx = 1;\n        settingsPanel.add(showClicksCheckBox, gbc);\n        \n        gbc.gridx = 0; gbc.gridy = 3;\n        settingsPanel.add(showSpeedCheckBox, gbc);\n        \n        // 色選択ボタン\n        gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 2;\n        JButton trailColorButton = new JButton(\"軌跡色\");\n        trailColorButton.setBackground(trailColor);\n        trailColorButton.setOpaque(true);\n        trailColorButton.addActionListener(e -> selectTrailColor());\n        settingsPanel.add(trailColorButton, gbc);\n        \n        // イベントログパネル\n        JPanel logPanel = new JPanel(new BorderLayout());\n        logPanel.setBorder(BorderFactory.createTitledBorder(\"イベントログ\"));\n        logPanel.add(new JScrollPane(eventLogArea), BorderLayout.CENTER);\n        \n        JButton clearLogButton = new JButton(\"ログクリア\");\n        clearLogButton.addActionListener(e -> eventLogArea.setText(\"\"));\n        logPanel.add(clearLogButton, BorderLayout.SOUTH);\n        \n        sidePanel.add(settingsPanel, BorderLayout.NORTH);\n        sidePanel.add(logPanel, BorderLayout.CENTER);\n        \n        return sidePanel;\n    }\n    \n    private JPanel createControlPanel() {\n        JPanel controlPanel = new JPanel(new FlowLayout());\n        \n        controlPanel.add(clearButton);\n        controlPanel.add(saveButton);\n        controlPanel.add(pauseButton);\n        \n        // ジェスチャーボタン\n        JButton gestureButton = new JButton(\"ジェスチャー設定\");\n        gestureButton.addActionListener(e -> showGestureSettings());\n        controlPanel.add(gestureButton);\n        \n        // 統計ボタン\n        JButton statsButton = new JButton(\"詳細統計\");\n        statsButton.addActionListener(e -> showDetailedStatistics());\n        controlPanel.add(statsButton);\n        \n        return controlPanel;\n    }\n    \n    private void setupEventHandlers() {\n        // トラッキングパネルのマウスイベント\n        MouseAdapter mouseHandler = new MouseAdapter() {\n            @Override\n            public void mouseMoved(MouseEvent e) {\n                if (isTracking) {\n                    handleMouseMove(e);\n                }\n            }\n            \n            @Override\n            public void mouseDragged(MouseEvent e) {\n                if (isTracking) {\n                    handleMouseMove(e);\n                }\n            }\n            \n            @Override\n            public void mouseClicked(MouseEvent e) {\n                if (isTracking) {\n                    handleMouseClick(e);\n                }\n            }\n            \n            @Override\n            public void mousePressed(MouseEvent e) {\n                if (isTracking) {\n                    logEvent(\"マウス押下: \" + getButtonName(e.getButton()) + \" at \" + e.getPoint());\n                }\n            }\n            \n            @Override\n            public void mouseReleased(MouseEvent e) {\n                if (isTracking) {\n                    logEvent(\"マウス離上: \" + getButtonName(e.getButton()) + \" at \" + e.getPoint());\n                }\n            }\n            \n            @Override\n            public void mouseEntered(MouseEvent e) {\n                hoverStart = e.getPoint();\n                hoverStartTime = System.currentTimeMillis();\n                logEvent(\"マウス領域進入: \" + e.getPoint());\n            }\n            \n            @Override\n            public void mouseExited(MouseEvent e) {\n                if (hoverStart != null) {\n                    long hoverTime = System.currentTimeMillis() - hoverStartTime;\n                    logEvent(\"マウス領域退出: \" + e.getPoint() + \" (滞在時間: \" + hoverTime + \"ms)\");\n                }\n                hoverStart = null;\n            }\n        };\n        \n        trackingPanel.addMouseListener(mouseHandler);\n        trackingPanel.addMouseMotionListener(mouseHandler);\n        \n        // マウスホイールイベント\n        trackingPanel.addMouseWheelListener(e -> {\n            if (isTracking) {\n                String direction = e.getWheelRotation() > 0 ? \"下\" : \"上\";\n                logEvent(\"マウスホイール: \" + direction + \" (\" + e.getWheelRotation() + \") at \" + e.getPoint());\n            }\n        });\n        \n        // コントロールイベント\n        trailLengthSlider.addChangeListener(e -> {\n            maxTrailLength = trailLengthSlider.getValue();\n            trimTrackPoints();\n        });\n        \n        showTrailCheckBox.addActionListener(e -> {\n            showTrail = showTrailCheckBox.isSelected();\n            trackingPanel.repaint();\n        });\n        \n        showClicksCheckBox.addActionListener(e -> {\n            showClicks = showClicksCheckBox.isSelected();\n            trackingPanel.repaint();\n        });\n        \n        showSpeedCheckBox.addActionListener(e -> {\n            showSpeed = showSpeedCheckBox.isSelected();\n        });\n        \n        clearButton.addActionListener(e -> clearAllData());\n        saveButton.addActionListener(e -> saveTrackingData());\n        pauseButton.addActionListener(e -> toggleTracking());\n    }\n    \n    private void setupTimers() {\n        // 統計更新タイマー\n        statisticsTimer = new Timer(100, e -> updateStatistics());\n        statisticsTimer.start();\n        \n        // ホバータイマー（ホバー時間の詳細監視用）\n        hoverTimer = new Timer(1000, e -> {\n            if (hoverStart != null) {\n                long hoverTime = System.currentTimeMillis() - hoverStartTime;\n                if (hoverTime > 5000) { // 5秒以上のホバー\n                    logEvent(\"長時間ホバー検出: \" + hoverStart + \" (\" + hoverTime + \"ms)\");\n                }\n            }\n        });\n        hoverTimer.start();\n    }\n    \n    private void setupWindow() {\n        setTitle(\"Advanced Mouse Tracker\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(1000, 700);\n        setLocationRelativeTo(null);\n    }\n    \n    private void handleMouseMove(MouseEvent e) {\n        Point currentPoint = e.getPoint();\n        long currentTime = System.currentTimeMillis();\n        \n        if (lastPosition != null) {\n            double distance = lastPosition.distance(currentPoint);\n            totalDistance += distance;\n            \n            // 速度計算\n            if (lastMoveTime > 0) {\n                double timeDiff = (currentTime - lastMoveTime) / 1000.0; // 秒\n                if (timeDiff > 0) {\n                    currentSpeed = distance / timeDiff; // ピクセル/秒\n                }\n            }\n            \n            // ジェスチャー認識\n            gestureRecognizer.addPoint(currentPoint, currentTime);\n        }\n        \n        // トラックポイントの追加\n        synchronized (trackPoints) {\n            trackPoints.add(new TrackPoint(currentPoint, currentTime, currentSpeed));\n            trimTrackPoints();\n        }\n        \n        lastPosition = currentPoint;\n        lastMoveTime = currentTime;\n        \n        // 座標表示の更新\n        updateCoordinateDisplay(currentPoint);\n        \n        // 描画更新\n        trackingPanel.repaint();\n    }\n    \n    private void handleMouseClick(MouseEvent e) {\n        totalClicks++;\n        int button = e.getButton();\n        int clickCount = e.getClickCount();\n        \n        ClickInfo clickInfo = new ClickInfo(e.getPoint(), System.currentTimeMillis(), \n                                          button, clickCount);\n        clickCounts.put(clickCounts.size(), clickInfo);\n        \n        String clickType = getClickType(clickCount);\n        String buttonName = getButtonName(button);\n        \n        logEvent(clickType + \" (\" + buttonName + \") at \" + e.getPoint());\n        \n        // 特殊クリックの検出\n        if (clickCount >= 3) {\n            logEvent(\"トリプルクリック以上検出!\");\n        }\n        \n        trackingPanel.repaint();\n    }\n    \n    private void updateStatistics() {\n        // セッション時間の更新\n        long sessionTime = System.currentTimeMillis() - sessionStartTime;\n        sessionLabel.setText(\"セッション時間: \" + formatTime(sessionTime));\n        \n        // 統計情報の更新\n        DecimalFormat df = new DecimalFormat(\"#0.0\");\n        speedLabel.setText(\"速度: \" + df.format(currentSpeed) + \" px/s\");\n        distanceLabel.setText(\"総移動距離: \" + df.format(totalDistance) + \" px\");\n        clickLabel.setText(\"クリック数: \" + totalClicks);\n    }\n    \n    private void updateCoordinateDisplay(Point point) {\n        coordinateLabel.setText(\"座標: (\" + point.x + \", \" + point.y + \")\");\n    }\n    \n    private void trimTrackPoints() {\n        synchronized (trackPoints) {\n            while (trackPoints.size() > maxTrailLength) {\n                trackPoints.remove(0);\n            }\n        }\n    }\n    \n    private void logEvent(String message) {\n        String timestamp = new Date().toString();\n        String logEntry = \"[\" + timestamp + \"] \" + message + \"\\n\";\n        \n        SwingUtilities.invokeLater(() -> {\n            eventLogArea.append(logEntry);\n            eventLogArea.setCaretPosition(eventLogArea.getDocument().getLength());\n        });\n        \n        // ログサイズの制限\n        if (eventLogArea.getLineCount() > 1000) {\n            SwingUtilities.invokeLater(() -> {\n                try {\n                    int endOffset = eventLogArea.getLineEndOffset(100);\n                    eventLogArea.replaceRange(\"\", 0, endOffset);\n                } catch (Exception ex) {\n                    // エラー時は全クリア\n                    eventLogArea.setText(\"\");\n                }\n            });\n        }\n    }\n    \n    private String getButtonName(int button) {\n        switch (button) {\n            case MouseEvent.BUTTON1: return \"左\";\n            case MouseEvent.BUTTON2: return \"中央\";\n            case MouseEvent.BUTTON3: return \"右\";\n            default: return \"不明(\" + button + \")\";\n        }\n    }\n    \n    private String getClickType(int clickCount) {\n        switch (clickCount) {\n            case 1: return \"シングルクリック\";\n            case 2: return \"ダブルクリック\";\n            case 3: return \"トリプルクリック\";\n            default: return clickCount + \"回クリック\";\n        }\n    }\n    \n    private String formatTime(long millis) {\n        long seconds = millis / 1000;\n        long minutes = seconds / 60;\n        long hours = minutes / 60;\n        \n        return String.format(\"%02d:%02d:%02d\", hours % 24, minutes % 60, seconds % 60);\n    }\n    \n    private void selectTrailColor() {\n        Color newColor = JColorChooser.showDialog(this, \"軌跡の色を選択\", trailColor);\n        if (newColor != null) {\n            trailColor = newColor;\n            trackingPanel.repaint();\n        }\n    }\n    \n    private void clearAllData() {\n        synchronized (trackPoints) {\n            trackPoints.clear();\n        }\n        clickCounts.clear();\n        resetStatistics();\n        eventLogArea.setText(\"\");\n        trackingPanel.repaint();\n        \n        logEvent(\"全データをクリアしました\");\n    }\n    \n    private void resetStatistics() {\n        totalDistance = 0;\n        totalClicks = 0;\n        currentSpeed = 0;\n        sessionStartTime = System.currentTimeMillis();\n        lastPosition = null;\n        lastMoveTime = 0;\n    }\n    \n    private void toggleTracking() {\n        isTracking = !isTracking;\n        pauseButton.setText(isTracking ? \"一時停止\" : \"再開\");\n        logEvent(isTracking ? \"トラッキング再開\" : \"トラッキング一時停止\");\n    }\n    \n    private void saveTrackingData() {\n        JFileChooser fileChooser = new JFileChooser();\n        fileChooser.setSelectedFile(new File(\"mouse_tracking_\" + System.currentTimeMillis() + \".csv\"));\n        \n        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {\n            File file = fileChooser.getSelectedFile();\n            try (FileWriter writer = new FileWriter(file)) {\n                writer.write(\"Timestamp,X,Y,Speed\\n\");\n                \n                synchronized (trackPoints) {\n                    for (TrackPoint point : trackPoints) {\n                        writer.write(point.timestamp + \",\" + point.point.x + \",\" + \n                                   point.point.y + \",\" + point.speed + \"\\n\");\n                    }\n                }\n                \n                JOptionPane.showMessageDialog(this, \"トラッキングデータを保存しました: \" + file.getName());\n                logEvent(\"データ保存: \" + file.getAbsolutePath());\n                \n            } catch (IOException ex) {\n                JOptionPane.showMessageDialog(this, \"保存に失敗しました: \" + ex.getMessage(),\n                    \"エラー\", JOptionPane.ERROR_MESSAGE);\n            }\n        }\n    }\n    \n    private void showGestureSettings() {\n        JDialog dialog = new JDialog(this, \"ジェスチャー設定\", true);\n        dialog.setSize(400, 300);\n        dialog.setLocationRelativeTo(this);\n        \n        JPanel panel = new JPanel(new BorderLayout());\n        panel.add(new JLabel(\"ジェスチャー認識設定（実装例）\"), BorderLayout.CENTER);\n        \n        JButton closeButton = new JButton(\"閉じる\");\n        closeButton.addActionListener(e -> dialog.setVisible(false));\n        panel.add(closeButton, BorderLayout.SOUTH);\n        \n        dialog.add(panel);\n        dialog.setVisible(true);\n    }\n    \n    private void showDetailedStatistics() {\n        JDialog dialog = new JDialog(this, \"詳細統計\", true);\n        dialog.setSize(500, 400);\n        dialog.setLocationRelativeTo(this);\n        \n        JTextArea statsArea = new JTextArea();\n        statsArea.setEditable(false);\n        statsArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));\n        \n        StringBuilder stats = new StringBuilder();\n        stats.append(\"=== マウストラッキング統計 ===\\n\\n\");\n        stats.append(\"セッション時間: \").append(formatTime(System.currentTimeMillis() - sessionStartTime)).append(\"\\n\");\n        stats.append(\"総移動距離: \").append(String.format(\"%.2f\", totalDistance)).append(\" ピクセル\\n\");\n        stats.append(\"総クリック数: \").append(totalClicks).append(\"\\n\");\n        stats.append(\"記録ポイント数: \").append(trackPoints.size()).append(\"\\n\");\n        stats.append(\"現在の速度: \").append(String.format(\"%.2f\", currentSpeed)).append(\" px/s\\n\\n\");\n        \n        // クリック統計\n        stats.append(\"=== クリック統計 ===\\n\");\n        Map<Integer, Integer> buttonCounts = new HashMap<>();\n        Map<Integer, Integer> clickTypeCounts = new HashMap<>();\n        \n        for (ClickInfo click : clickCounts.values()) {\n            buttonCounts.put(click.button, buttonCounts.getOrDefault(click.button, 0) + 1);\n            clickTypeCounts.put(click.clickCount, clickTypeCounts.getOrDefault(click.clickCount, 0) + 1);\n        }\n        \n        for (Map.Entry<Integer, Integer> entry : buttonCounts.entrySet()) {\n            stats.append(getButtonName(entry.getKey())).append(\"ボタン: \").append(entry.getValue()).append(\"回\\n\");\n        }\n        \n        stats.append(\"\\n\");\n        for (Map.Entry<Integer, Integer> entry : clickTypeCounts.entrySet()) {\n            stats.append(getClickType(entry.getKey())).append(\": \").append(entry.getValue()).append(\"回\\n\");\n        }\n        \n        statsArea.setText(stats.toString());\n        \n        JPanel panel = new JPanel(new BorderLayout());\n        panel.add(new JScrollPane(statsArea), BorderLayout.CENTER);\n        \n        JButton closeButton = new JButton(\"閉じる\");\n        closeButton.addActionListener(e -> dialog.setVisible(false));\n        panel.add(closeButton, BorderLayout.SOUTH);\n        \n        dialog.add(panel);\n        dialog.setVisible(true);\n    }\n    \n    // トラッキングパネルクラス\n    private class TrackingPanel extends JPanel {\n        @Override\n        protected void paintComponent(Graphics g) {\n            super.paintComponent(g);\n            Graphics2D g2d = (Graphics2D) g.create();\n            \n            // アンチエイリアス設定\n            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n            \n            // 背景グリッドの描画\n            drawGrid(g2d);\n            \n            // 軌跡の描画\n            if (showTrail && !trackPoints.isEmpty()) {\n                drawTrail(g2d);\n            }\n            \n            // クリック位置の描画\n            if (showClicks) {\n                drawClicks(g2d);\n            }\n            \n            // 速度情報の描画\n            if (showSpeed && lastPosition != null) {\n                drawSpeedInfo(g2d);\n            }\n            \n            g2d.dispose();\n        }\n        \n        private void drawGrid(Graphics2D g2d) {\n            g2d.setColor(Color.LIGHT_GRAY);\n            g2d.setStroke(new BasicStroke(0.5f));\n            \n            int gridSize = 50;\n            for (int x = 0; x < getWidth(); x += gridSize) {\n                g2d.drawLine(x, 0, x, getHeight());\n            }\n            for (int y = 0; y < getHeight(); y += gridSize) {\n                g2d.drawLine(0, y, getWidth(), y);\n            }\n        }\n        \n        private void drawTrail(Graphics2D g2d) {\n            synchronized (trackPoints) {\n                if (trackPoints.size() < 2) return;\n                \n                Path2D path = new Path2D.Double();\n                boolean first = true;\n                \n                for (TrackPoint tp : trackPoints) {\n                    if (first) {\n                        path.moveTo(tp.point.x, tp.point.y);\n                        first = false;\n                    } else {\n                        path.lineTo(tp.point.x, tp.point.y);\n                    }\n                }\n                \n                // グラデーション効果\n                g2d.setStroke(new BasicStroke(2.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));\n                \n                for (int i = 1; i < trackPoints.size(); i++) {\n                    TrackPoint prev = trackPoints.get(i - 1);\n                    TrackPoint curr = trackPoints.get(i);\n                    \n                    // 透明度を距離に応じて調整\n                    float alpha = (float) i / trackPoints.size();\n                    Color segmentColor = new Color(trailColor.getRed(), trailColor.getGreen(), \n                                                 trailColor.getBlue(), (int) (255 * alpha));\n                    g2d.setColor(segmentColor);\n                    g2d.drawLine(prev.point.x, prev.point.y, curr.point.x, curr.point.y);\n                }\n            }\n        }\n        \n        private void drawClicks(Graphics2D g2d) {\n            for (ClickInfo click : clickCounts.values()) {\n                Color color = getClickColor(click.button);\n                g2d.setColor(color);\n                \n                int size = click.clickCount * 6 + 4;\n                g2d.fillOval(click.point.x - size / 2, click.point.y - size / 2, size, size);\n                \n                // クリック数の表示\n                if (click.clickCount > 1) {\n                    g2d.setColor(Color.WHITE);\n                    g2d.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 10));\n                    String text = String.valueOf(click.clickCount);\n                    FontMetrics fm = g2d.getFontMetrics();\n                    int textX = click.point.x - fm.stringWidth(text) / 2;\n                    int textY = click.point.y + fm.getAscent() / 2;\n                    g2d.drawString(text, textX, textY);\n                }\n            }\n        }\n        \n        private void drawSpeedInfo(Graphics2D g2d) {\n            if (currentSpeed > 0) {\n                g2d.setColor(Color.BLACK);\n                g2d.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));\n                String speedText = String.format(\"%.1f px/s\", currentSpeed);\n                g2d.drawString(speedText, lastPosition.x + 10, lastPosition.y - 10);\n            }\n        }\n        \n        private Color getClickColor(int button) {\n            switch (button) {\n                case MouseEvent.BUTTON1: return Color.RED;\n                case MouseEvent.BUTTON2: return Color.BLUE;\n                case MouseEvent.BUTTON3: return Color.GREEN;\n                default: return Color.GRAY;\n            }\n        }\n    }\n    \n    // データクラス\n    private static class TrackPoint {\n        final Point point;\n        final long timestamp;\n        final double speed;\n        \n        TrackPoint(Point point, long timestamp, double speed) {\n            this.point = new Point(point);\n            this.timestamp = timestamp;\n            this.speed = speed;\n        }\n    }\n    \n    private static class ClickInfo {\n        final Point point;\n        final long timestamp;\n        final int button;\n        final int clickCount;\n        \n        ClickInfo(Point point, long timestamp, int button, int clickCount) {\n            this.point = new Point(point);\n            this.timestamp = timestamp;\n            this.button = button;\n            this.clickCount = clickCount;\n        }\n    }\n    \n    // ジェスチャー認識クラス（簡略化）\n    private class GestureRecognizer {\n        private List<Point> gesturePoints = new ArrayList<>();\n        private long lastGestureTime = 0;\n        \n        public void addPoint(Point point, long timestamp) {\n            // 簡単なジェスチャー認識ロジック\n            gesturePoints.add(new Point(point));\n            \n            // 古いポイントを削除\n            if (timestamp - lastGestureTime > 2000) {\n                gesturePoints.clear();\n            }\n            \n            lastGestureTime = timestamp;\n            \n            // ジェスチャーパターンの検出（例：円、直線）\n            if (gesturePoints.size() > 20) {\n                analyzeGesture();\n                gesturePoints.clear();\n            }\n        }\n        \n        private void analyzeGesture() {\n            // 簡単なジェスチャー認識（実装例）\n            if (isCircularGesture()) {\n                logEvent(\"円形ジェスチャーを検出\");\n            } else if (isLinearGesture()) {\n                logEvent(\"直線ジェスチャーを検出\");\n            }\n        }\n        \n        private boolean isCircularGesture() {\n            // 円形ジェスチャーの簡単な検出ロジック\n            return gesturePoints.size() > 15;\n        }\n        \n        private boolean isLinearGesture() {\n            // 直線ジェスチャーの簡単な検出ロジック\n            return false;\n        }\n    }\n    \n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            try {\n                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeel());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            \n            new MouseTracker().setVisible(true);\n        });\n    }\n}