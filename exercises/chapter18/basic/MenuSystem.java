/**
 * 第18章 GUI イベント処理応用
 * 演習課題: MenuSystem.java
 * 
 * 【課題概要】
 * 多層メニューシステムと動的メニュー生成機能を持つアプリケーションを作成してください。
 * 
 * 【要求仕様】
 * 1. 階層的なメニュー構造（メニュー、サブメニュー、サブサブメニュー）
 * 2. 動的メニュー項目の追加・削除・変更機能
 * 3. カスタムメニューアイテム（アイコン、カスタム描画）
 * 4. コンテキストメニュー（右クリックメニュー）の実装
 * 5. ツールバーとメニューバーの連携
 * 6. メニュー項目の有効/無効制御
 * 7. 最近使用したファイル（MRU: Most Recently Used）メニュー
 * 8. カスタマイズ可能なメニュー配置
 * 9. メニューアクションの履歴管理
 * 10. キーボードショートカットの動的割り当て
 * 
 * 【学習ポイント】
 * - JMenuBar、JMenu、JMenuItem の階層構造
 * - Action クラスによる統一的なアクション管理
 * - PopupMenu の作成と表示制御
 * - MenuListener によるメニューイベント処理
 * - カスタムメニューアイテムの描画
 * - KeyStroke による動的キーバインディング
 * - MVC パターンによるメニューデータ管理
 * 
 * 【実装のヒント】
 * 1. Action クラスでアクションの統一管理
 * 2. MenuListener でメニューの表示/非表示イベントを処理
 * 3. SwingUtilities.isRightMouseButton() で右クリック判定
 * 4. DefaultListModel でMRUリストを管理
 * 5. Properties ファイルでメニュー設定を永続化
 * 
 * 【よくある間違いと対策】
 * - メニュー項目の重複管理
 *   → Action クラスで一元管理し、複数箇所で使い回し
 * - メモリリークによるメニュー項目の蓄積
 *   → 動的メニューの適切な削除と参照管理
 * - キーボードショートカットの重複
 *   → 一元的なキーマネージャーで競合チェック
 * - メニューの状態同期不良
 *   → Observer パターンでの統一的な状態管理
 * 
 * 【段階的な実装指針】
 * 1. 基本的なメニューバー構造の作成
 * 2. Action クラスによるアクション管理の実装
 * 3. 動的メニュー操作機能の追加
 * 4. コンテキストメニューの実装
 * 5. MRUメニューの実装
 * 6. カスタムメニューアイテムの追加
 * 7. メニューカスタマイズ機能の実装
 * 8. 設定の永続化と復元機能の追加
 */

import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.io.*;\nimport java.util.*;\nimport java.util.List;\nimport java.util.prefs.Preferences;\n\npublic class MenuSystem extends JFrame {\n    // メニュー管理\n    private JMenuBar menuBar;\n    private Map<String, Action> actions;\n    private List<String> recentFiles;\n    private JMenu recentMenu;\n    private Properties menuConfig;\n    private Preferences preferences;\n    \n    // UI コンポーネント\n    private JToolBar toolBar;\n    private JTextArea contentArea;\n    private JLabel statusLabel;\n    private JPanel dynamicMenuPanel;\n    private DefaultListModel<String> menuHistoryModel;\n    private JList<String> menuHistoryList;\n    \n    // メニューカスタマイズ\n    private MenuCustomizer menuCustomizer;\n    private boolean menuBarVisible = true;\n    private boolean toolBarVisible = true;\n    \n    public MenuSystem() {\n        actions = new HashMap<>();\n        recentFiles = new ArrayList<>();\n        menuConfig = new Properties();\n        preferences = Preferences.userNodeForPackage(MenuSystem.class);\n        menuHistoryModel = new DefaultListModel<>();\n        \n        initializeActions();\n        initializeComponents();\n        setupMenuBar();\n        setupToolBar();\n        setupLayout();\n        setupContextMenus();\n        setupEventHandlers();\n        setupWindow();\n        \n        loadConfiguration();\n        loadRecentFiles();\n    }\n    \n    private void initializeActions() {\n        // ファイルアクション\n        actions.put(\"new\", new MenuAction(\"新規作成\", \"新しいドキュメントを作成\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK),\n            loadIcon(\"new.png\")) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                newFile();\n                addToHistory(\"新規作成\");\n            }\n        });\n        \n        actions.put(\"open\", new MenuAction(\"開く\", \"ファイルを開く\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_DOWN_MASK),\n            loadIcon(\"open.png\")) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                openFile();\n                addToHistory(\"ファイルを開く\");\n            }\n        });\n        \n        actions.put(\"save\", new MenuAction(\"保存\", \"ファイルを保存\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK),\n            loadIcon(\"save.png\")) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                saveFile();\n                addToHistory(\"ファイルを保存\");\n            }\n        });\n        \n        actions.put(\"exit\", new MenuAction(\"終了\", \"アプリケーションを終了\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_DOWN_MASK),\n            null) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                exitApplication();\n            }\n        });\n        \n        // 編集アクション\n        actions.put(\"cut\", new MenuAction(\"切り取り\", \"選択したテキストを切り取り\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_DOWN_MASK),\n            loadIcon(\"cut.png\")) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (contentArea.getSelectedText() != null) {\n                    contentArea.cut();\n                    addToHistory(\"切り取り\");\n                }\n            }\n        });\n        \n        actions.put(\"copy\", new MenuAction(\"コピー\", \"選択したテキストをコピー\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK),\n            loadIcon(\"copy.png\")) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (contentArea.getSelectedText() != null) {\n                    contentArea.copy();\n                    addToHistory(\"コピー\");\n                }\n            }\n        });\n        \n        actions.put(\"paste\", new MenuAction(\"貼り付け\", \"クリップボードから貼り付け\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_DOWN_MASK),\n            loadIcon(\"paste.png\")) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                contentArea.paste();\n                addToHistory(\"貼り付け\");\n            }\n        });\n        \n        // 表示アクション\n        actions.put(\"toggleMenuBar\", new MenuAction(\"メニューバー表示切替\", \"メニューバーの表示/非表示\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_M, InputEvent.CTRL_DOWN_MASK),\n            null) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                toggleMenuBar();\n                addToHistory(\"メニューバー表示切替\");\n            }\n        });\n        \n        actions.put(\"toggleToolBar\", new MenuAction(\"ツールバー表示切替\", \"ツールバーの表示/非表示\", \n            KeyStroke.getKeyStroke(KeyEvent.VK_T, InputEvent.CTRL_DOWN_MASK),\n            null) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                toggleToolBar();\n                addToHistory(\"ツールバー表示切替\");\n            }\n        });\n        \n        // カスタムアクション\n        actions.put(\"customize\", new MenuAction(\"メニューカスタマイズ\", \"メニューをカスタマイズ\", \n            null, null) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                showMenuCustomizer();\n                addToHistory(\"メニューカスタマイズ\");\n            }\n        });\n        \n        actions.put(\"addDynamicMenu\", new MenuAction(\"動的メニュー追加\", \"新しいメニュー項目を追加\", \n            null, null) {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                addDynamicMenuItem();\n                addToHistory(\"動的メニュー追加\");\n            }\n        });\n    }\n    \n    private void initializeComponents() {\n        contentArea = new JTextArea(20, 40);\n        contentArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 14));\n        contentArea.setLineWrap(true);\n        contentArea.setWrapStyleWord(true);\n        \n        statusLabel = new JLabel(\"準備完了\");\n        statusLabel.setBorder(BorderFactory.createLoweredBevelBorder());\n        \n        dynamicMenuPanel = new JPanel(new FlowLayout());\n        dynamicMenuPanel.setBorder(BorderFactory.createTitledBorder(\"動的メニュー\"));\n        \n        menuHistoryList = new JList<>(menuHistoryModel);\n        menuHistoryList.setVisibleRowCount(10);\n        menuHistoryList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        \n        menuCustomizer = new MenuCustomizer();\n    }\n    \n    private void setupMenuBar() {\n        menuBar = new JMenuBar();\n        \n        // ファイルメニュー\n        JMenu fileMenu = new JMenu(\"ファイル(F)\");\n        fileMenu.setMnemonic('F');\n        \n        fileMenu.add(actions.get(\"new\"));\n        fileMenu.add(actions.get(\"open\"));\n        fileMenu.addSeparator();\n        fileMenu.add(actions.get(\"save\"));\n        \n        // 最近使用したファイルメニュー\n        recentMenu = new JMenu(\"最近使用したファイル\");\n        fileMenu.add(recentMenu);\n        \n        fileMenu.addSeparator();\n        fileMenu.add(actions.get(\"exit\"));\n        \n        // 編集メニュー\n        JMenu editMenu = new JMenu(\"編集(E)\");\n        editMenu.setMnemonic('E');\n        \n        editMenu.add(actions.get(\"cut\"));\n        editMenu.add(actions.get(\"copy\"));\n        editMenu.add(actions.get(\"paste\"));\n        \n        // 表示メニュー\n        JMenu viewMenu = new JMenu(\"表示(V)\");\n        viewMenu.setMnemonic('V');\n        \n        viewMenu.add(actions.get(\"toggleMenuBar\"));\n        viewMenu.add(actions.get(\"toggleToolBar\"));\n        \n        // サブメニューの例\n        JMenu appearanceMenu = new JMenu(\"外観\");\n        appearanceMenu.add(new JMenuItem(\"フォント設定\"));\n        appearanceMenu.add(new JMenuItem(\"色設定\"));\n        \n        JMenu themesMenu = new JMenu(\"テーマ\");\n        themesMenu.add(new JRadioButtonMenuItem(\"デフォルト\", true));\n        themesMenu.add(new JRadioButtonMenuItem(\"ダーク\"));\n        themesMenu.add(new JRadioButtonMenuItem(\"ライト\"));\n        \n        appearanceMenu.add(themesMenu);\n        viewMenu.add(appearanceMenu);\n        \n        // ツールメニュー\n        JMenu toolsMenu = new JMenu(\"ツール(T)\");\n        toolsMenu.setMnemonic('T');\n        \n        toolsMenu.add(actions.get(\"addDynamicMenu\"));\n        toolsMenu.add(actions.get(\"customize\"));\n        \n        // 動的メニューセクション\n        JMenu dynamicMenu = new JMenu(\"動的メニュー\");\n        toolsMenu.add(dynamicMenu);\n        \n        // ヘルプメニュー\n        JMenu helpMenu = new JMenu(\"ヘルプ(H)\");\n        helpMenu.setMnemonic('H');\n        \n        helpMenu.add(new JMenuItem(\"使用方法\"));\n        helpMenu.add(new JMenuItem(\"キーボードショートカット\"));\n        helpMenu.addSeparator();\n        helpMenu.add(new JMenuItem(\"バージョン情報\"));\n        \n        menuBar.add(fileMenu);\n        menuBar.add(editMenu);\n        menuBar.add(viewMenu);\n        menuBar.add(toolsMenu);\n        menuBar.add(helpMenu);\n        \n        setJMenuBar(menuBar);\n        \n        // メニューイベントリスナー\n        setupMenuListeners();\n    }\n    \n    private void setupMenuListeners() {\n        for (int i = 0; i < menuBar.getMenuCount(); i++) {\n            JMenu menu = menuBar.getMenu(i);\n            menu.addMenuListener(new MenuListener() {\n                @Override\n                public void menuSelected(MenuEvent e) {\n                    updateMenuStates();\n                    statusLabel.setText(\"メニュー: \" + ((JMenu)e.getSource()).getText());\n                }\n                \n                @Override\n                public void menuDeselected(MenuEvent e) {\n                    statusLabel.setText(\"準備完了\");\n                }\n                \n                @Override\n                public void menuCanceled(MenuEvent e) {\n                    statusLabel.setText(\"準備完了\");\n                }\n            });\n        }\n    }\n    \n    private void setupToolBar() {\n        toolBar = new JToolBar(\"メインツールバー\");\n        toolBar.setFloatable(true);\n        \n        toolBar.add(actions.get(\"new\"));\n        toolBar.add(actions.get(\"open\"));\n        toolBar.add(actions.get(\"save\"));\n        toolBar.addSeparator();\n        toolBar.add(actions.get(\"cut\"));\n        toolBar.add(actions.get(\"copy\"));\n        toolBar.add(actions.get(\"paste\"));\n        toolBar.addSeparator();\n        \n        // カスタムコンポーネント\n        JComboBox<String> fontSizeCombo = new JComboBox<>(new String[]{\"10\", \"12\", \"14\", \"16\", \"18\", \"20\"});\n        fontSizeCombo.setSelectedItem(\"14\");\n        fontSizeCombo.addActionListener(e -> {\n            int size = Integer.parseInt((String)fontSizeCombo.getSelectedItem());\n            contentArea.setFont(contentArea.getFont().deriveFont((float)size));\n            addToHistory(\"フォントサイズ変更: \" + size);\n        });\n        \n        toolBar.add(new JLabel(\"サイズ:\"));\n        toolBar.add(fontSizeCombo);\n    }\n    \n    private void setupLayout() {\n        setLayout(new BorderLayout());\n        \n        // メインコンテンツエリア\n        JScrollPane scrollPane = new JScrollPane(contentArea);\n        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        \n        // サイドパネル（メニュー履歴）\n        JPanel sidePanel = new JPanel(new BorderLayout());\n        sidePanel.setBorder(BorderFactory.createTitledBorder(\"メニュー履歴\"));\n        sidePanel.add(new JScrollPane(menuHistoryList), BorderLayout.CENTER);\n        \n        JButton clearHistoryButton = new JButton(\"履歴クリア\");\n        clearHistoryButton.addActionListener(e -> {\n            menuHistoryModel.clear();\n            addToHistory(\"履歴クリア\");\n        });\n        sidePanel.add(clearHistoryButton, BorderLayout.SOUTH);\n        sidePanel.setPreferredSize(new Dimension(200, 0));\n        \n        // レイアウト配置\n        add(toolBar, BorderLayout.NORTH);\n        add(scrollPane, BorderLayout.CENTER);\n        add(sidePanel, BorderLayout.EAST);\n        add(statusLabel, BorderLayout.SOUTH);\n    }\n    \n    private void setupContextMenus() {\n        // テキストエリア用コンテキストメニュー\n        JPopupMenu textContextMenu = new JPopupMenu();\n        textContextMenu.add(actions.get(\"cut\"));\n        textContextMenu.add(actions.get(\"copy\"));\n        textContextMenu.add(actions.get(\"paste\"));\n        textContextMenu.addSeparator();\n        textContextMenu.add(new JMenuItem(\"すべて選択\"));\n        textContextMenu.add(new JMenuItem(\"検索\"));\n        \n        contentArea.setComponentPopupMenu(textContextMenu);\n        \n        // メニューバー用コンテキストメニュー\n        JPopupMenu menuBarContextMenu = new JPopupMenu();\n        menuBarContextMenu.add(actions.get(\"customize\"));\n        menuBarContextMenu.add(actions.get(\"addDynamicMenu\"));\n        menuBarContextMenu.addSeparator();\n        menuBarContextMenu.add(new JMenuItem(\"メニューをリセット\"));\n        \n        menuBar.setComponentPopupMenu(menuBarContextMenu);\n    }\n    \n    private void setupEventHandlers() {\n        // ウィンドウクローズイベント\n        addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                saveConfiguration();\n                saveRecentFiles();\n                System.exit(0);\n            }\n        });\n        \n        // テキストエリアの選択状態でメニューを更新\n        contentArea.addCaretListener(e -> updateMenuStates());\n    }\n    \n    private void setupWindow() {\n        setTitle(\"Advanced Menu System\");\n        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n        setSize(800, 600);\n        setLocationRelativeTo(null);\n    }\n    \n    private void updateMenuStates() {\n        boolean hasSelection = contentArea.getSelectedText() != null;\n        actions.get(\"cut\").setEnabled(hasSelection);\n        actions.get(\"copy\").setEnabled(hasSelection);\n        \n        // クリップボードの状態をチェック（簡略化）\n        actions.get(\"paste\").setEnabled(true);\n    }\n    \n    private void updateRecentFilesMenu() {\n        recentMenu.removeAll();\n        \n        for (int i = 0; i < Math.min(recentFiles.size(), 10); i++) {\n            String filePath = recentFiles.get(i);\n            String fileName = new File(filePath).getName();\n            \n            JMenuItem item = new JMenuItem((i + 1) + \". \" + fileName);\n            item.setToolTipText(filePath);\n            item.addActionListener(e -> {\n                openRecentFile(filePath);\n                addToHistory(\"最近のファイルを開く: \" + fileName);\n            });\n            \n            recentMenu.add(item);\n        }\n        \n        if (!recentFiles.isEmpty()) {\n            recentMenu.addSeparator();\n            JMenuItem clearItem = new JMenuItem(\"履歴をクリア\");\n            clearItem.addActionListener(e -> {\n                recentFiles.clear();\n                updateRecentFilesMenu();\n                addToHistory(\"最近のファイル履歴をクリア\");\n            });\n            recentMenu.add(clearItem);\n        }\n    }\n    \n    private void addToHistory(String action) {\n        String timestamp = new Date().toString();\n        String entry = timestamp + \" - \" + action;\n        \n        menuHistoryModel.insertElementAt(entry, 0);\n        \n        // 履歴の最大数を制限\n        if (menuHistoryModel.size() > 100) {\n            menuHistoryModel.remove(menuHistoryModel.size() - 1);\n        }\n    }\n    \n    private void addToRecentFiles(String filePath) {\n        recentFiles.remove(filePath); // 重複を削除\n        recentFiles.add(0, filePath);\n        \n        // 最大10ファイルまで\n        if (recentFiles.size() > 10) {\n            recentFiles.remove(recentFiles.size() - 1);\n        }\n        \n        updateRecentFilesMenu();\n    }\n    \n    // アクション実装メソッド\n    private void newFile() {\n        contentArea.setText(\"\");\n        statusLabel.setText(\"新しいドキュメントを作成しました\");\n    }\n    \n    private void openFile() {\n        JFileChooser fileChooser = new JFileChooser();\n        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {\n            File file = fileChooser.getSelectedFile();\n            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {\n                contentArea.read(reader, null);\n                addToRecentFiles(file.getAbsolutePath());\n                statusLabel.setText(\"ファイルを開きました: \" + file.getName());\n            } catch (IOException ex) {\n                JOptionPane.showMessageDialog(this, \"ファイルの読み込みに失敗しました: \" + ex.getMessage(),\n                    \"エラー\", JOptionPane.ERROR_MESSAGE);\n            }\n        }\n    }\n    \n    private void saveFile() {\n        JFileChooser fileChooser = new JFileChooser();\n        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {\n            File file = fileChooser.getSelectedFile();\n            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {\n                contentArea.write(writer);\n                addToRecentFiles(file.getAbsolutePath());\n                statusLabel.setText(\"ファイルを保存しました: \" + file.getName());\n            } catch (IOException ex) {\n                JOptionPane.showMessageDialog(this, \"ファイルの保存に失敗しました: \" + ex.getMessage(),\n                    \"エラー\", JOptionPane.ERROR_MESSAGE);\n            }\n        }\n    }\n    \n    private void openRecentFile(String filePath) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n            contentArea.read(reader, null);\n            statusLabel.setText(\"最近のファイルを開きました: \" + new File(filePath).getName());\n        } catch (IOException ex) {\n            JOptionPane.showMessageDialog(this, \"ファイルの読み込みに失敗しました: \" + ex.getMessage(),\n                \"エラー\", JOptionPane.ERROR_MESSAGE);\n            recentFiles.remove(filePath);\n            updateRecentFilesMenu();\n        }\n    }\n    \n    private void toggleMenuBar() {\n        menuBarVisible = !menuBarVisible;\n        setJMenuBar(menuBarVisible ? menuBar : null);\n        revalidate();\n        statusLabel.setText(\"メニューバー: \" + (menuBarVisible ? \"表示\" : \"非表示\"));\n    }\n    \n    private void toggleToolBar() {\n        toolBarVisible = !toolBarVisible;\n        toolBar.setVisible(toolBarVisible);\n        statusLabel.setText(\"ツールバー: \" + (toolBarVisible ? \"表示\" : \"非表示\"));\n    }\n    \n    private void addDynamicMenuItem() {\n        String itemName = JOptionPane.showInputDialog(this, \"新しいメニュー項目の名前:\", \"動的メニュー追加\", \n            JOptionPane.QUESTION_MESSAGE);\n        \n        if (itemName != null && !itemName.trim().isEmpty()) {\n            // ツールメニューに動的に追加\n            JMenu toolsMenu = menuBar.getMenu(3); // ツールメニュー\n            JMenu dynamicMenu = (JMenu) toolsMenu.getItem(toolsMenu.getItemCount() - 2); // 動的メニュー\n            \n            JMenuItem newItem = new JMenuItem(itemName);\n            newItem.addActionListener(e -> {\n                JOptionPane.showMessageDialog(this, \"動的メニュー '\" + itemName + \"' が実行されました\");\n                addToHistory(\"動的メニュー実行: \" + itemName);\n            });\n            \n            dynamicMenu.add(newItem);\n            statusLabel.setText(\"動的メニュー項目を追加しました: \" + itemName);\n        }\n    }\n    \n    private void showMenuCustomizer() {\n        menuCustomizer.showDialog(this);\n    }\n    \n    private void exitApplication() {\n        saveConfiguration();\n        saveRecentFiles();\n        System.exit(0);\n    }\n    \n    private void loadConfiguration() {\n        // 設定の読み込み（簡略化）\n        try {\n            String configPath = System.getProperty(\"user.home\") + \"/.menuconfig.properties\";\n            File configFile = new File(configPath);\n            if (configFile.exists()) {\n                menuConfig.load(new FileInputStream(configFile));\n            }\n        } catch (IOException e) {\n            // 設定ファイルが見つからない場合は無視\n        }\n    }\n    \n    private void saveConfiguration() {\n        try {\n            String configPath = System.getProperty(\"user.home\") + \"/.menuconfig.properties\";\n            menuConfig.setProperty(\"menuBarVisible\", String.valueOf(menuBarVisible));\n            menuConfig.setProperty(\"toolBarVisible\", String.valueOf(toolBarVisible));\n            menuConfig.store(new FileOutputStream(configPath), \"Menu System Configuration\");\n        } catch (IOException e) {\n            // 保存エラーは無視\n        }\n    }\n    \n    private void loadRecentFiles() {\n        String recentFilesStr = preferences.get(\"recentFiles\", \"\");\n        if (!recentFilesStr.isEmpty()) {\n            String[] files = recentFilesStr.split(\";\");\n            for (String file : files) {\n                if (!file.trim().isEmpty()) {\n                    recentFiles.add(file);\n                }\n            }\n            updateRecentFilesMenu();\n        }\n    }\n    \n    private void saveRecentFiles() {\n        String recentFilesStr = String.join(\";\", recentFiles);\n        preferences.put(\"recentFiles\", recentFilesStr);\n    }\n    \n    private Icon loadIcon(String iconName) {\n        // アイコンの読み込み（リソースファイルから）\n        try {\n            // 実際の実装では、リソースファイルからアイコンを読み込む\n            return UIManager.getIcon(\"FileView.fileIcon\"); // プレースホルダー\n        } catch (Exception e) {\n            return null;\n        }\n    }\n    \n    // カスタムアクションクラス\n    private abstract class MenuAction extends AbstractAction {\n        public MenuAction(String name, String description, KeyStroke accelerator, Icon icon) {\n            super(name, icon);\n            putValue(SHORT_DESCRIPTION, description);\n            if (accelerator != null) {\n                putValue(ACCELERATOR_KEY, accelerator);\n            }\n        }\n    }\n    \n    // メニューカスタマイザークラス\n    private class MenuCustomizer {\n        private JDialog dialog;\n        private JList<String> availableActions;\n        private JList<String> menuItems;\n        \n        public MenuCustomizer() {\n            initializeDialog();\n        }\n        \n        private void initializeDialog() {\n            dialog = new JDialog(MenuSystem.this, \"メニューカスタマイズ\", true);\n            dialog.setSize(500, 400);\n            dialog.setLocationRelativeTo(MenuSystem.this);\n            \n            // カスタマイズUI（簡略化）\n            JPanel panel = new JPanel(new BorderLayout());\n            panel.add(new JLabel(\"メニューカスタマイズ機能（実装例）\"), BorderLayout.CENTER);\n            \n            JButton closeButton = new JButton(\"閉じる\");\n            closeButton.addActionListener(e -> dialog.setVisible(false));\n            panel.add(closeButton, BorderLayout.SOUTH);\n            \n            dialog.add(panel);\n        }\n        \n        public void showDialog(Component parent) {\n            dialog.setVisible(true);\n        }\n    }\n    \n    public static void main(String[] args) {\n        SwingUtilities.invokeLater(() -> {\n            try {\n                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeel());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            \n            new MenuSystem().setVisible(true);\n        });\n    }\n}