pipeline {
    agent any
    
    environment {
        MAVEN_HOME = tool 'Maven-3.8.6'
        JAVA_HOME = tool 'JDK-17'
        DOCKER_REGISTRY = 'ghcr.io'
        IMAGE_NAME = 'myorg/cicd-cloud-native-app'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn clean compile"
            }
        }
        
        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        sh "${MAVEN_HOME}/bin/mvn test"
                    }
                    post {
                        always {
                            junit 'target/surefire-reports/*.xml'
                            publishHTML target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: 'target/site/jacoco',
                                reportFiles: 'index.html',
                                reportName: 'JaCoCo Coverage Report'
                            ]
                        }
                    }
                }
                
                stage('Static Analysis') {
                    steps {
                        sh "${MAVEN_HOME}/bin/mvn spotbugs:check"
                        sh "${MAVEN_HOME}/bin/mvn checkstyle:check"
                    }
                }
            }
        }
        
        stage('Package') {
            steps {
                sh "${MAVEN_HOME}/bin/mvn package -DskipTests"
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }
        
        stage('Docker Build') {
            when {
                branch 'main'
            }
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-credentials') {
                        def app = docker.build("${DOCKER_REGISTRY}/${IMAGE_NAME}:${env.BUILD_ID}")
                        app.push()
                        app.push('latest')
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withKubeConfig(credentialsId: 'kubeconfig-staging') {
                        sh """
                            kubectl set image deployment/app app=${DOCKER_REGISTRY}/${IMAGE_NAME}:${env.BUILD_ID} -n staging
                            kubectl rollout status deployment/app -n staging
                        """
                    }
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                tag pattern: "v\\d+\\.\\d+\\.\\d+", comparator: "REGEXP"
            }
            input {
                message "Deploy to production?"
                ok "Deploy"
            }
            steps {
                script {
                    withKubeConfig(credentialsId: 'kubeconfig-production') {
                        sh """
                            kubectl set image deployment/app app=${DOCKER_REGISTRY}/${IMAGE_NAME}:${env.BUILD_ID} -n production
                            kubectl rollout status deployment/app -n production
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            slackSend(
                color: 'good',
                message: "Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            )
        }
        failure {
            slackSend(
                color: 'danger',
                message: "Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            )
        }
    }
}